<!DOCTYPE html>

<html lang="ja" data-content_root="../">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="string --- 一般的な文字列操作" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/library/string.html" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="ソースコード: Lib/string.py 文字列定数: このモジュールで定義されている定数は以下の通りです: カスタムの文字列書式化: 組み込みの文字列 (string) クラスには、 PEP 3101 で記述されている format() メソッドによって複雑な変数置換と値のフォーマットを行う機能があります。 string モジュールの Formatter クラスでは、組み込みの form..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="ソースコード: Lib/string.py 文字列定数: このモジュールで定義されている定数は以下の通りです: カスタムの文字列書式化: 組み込みの文字列 (string) クラスには、 PEP 3101 で記述されている format() メソッドによって複雑な変数置換と値のフォーマットを行う機能があります。 string モジュールの Formatter クラスでは、組み込みの form..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>string --- 一般的な文字列操作 &#8212; Python 3.12.4 ドキュメント</title><meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=80d5e7a1" />
    <link rel="stylesheet" type="text/css" href="../_static/pydoctheme.css?v=bb723527" />
    <link id="pygments_dark_css" media="(prefers-color-scheme: dark)" rel="stylesheet" type="text/css" href="../_static/pygments_dark.css?v=b20cc3f5" />
    
    <script src="../_static/documentation_options.js?v=7e11ab17"></script>
    <script src="../_static/doctools.js?v=9a2dae69"></script>
    <script src="../_static/sphinx_highlight.js?v=dc90522c"></script>
    <script src="../_static/translations.js?v=4dbe4bdc"></script>
    
    <script src="../_static/sidebar.js"></script>
    
    <link rel="search" type="application/opensearchdescription+xml"
          title="Python 3.12.4 ドキュメント 内を検索"
          href="../_static/opensearch.xml"/>
    <link rel="author" title="このドキュメントについて" href="../about.html" />
    <link rel="index" title="索引" href="../genindex.html" />
    <link rel="search" title="検索" href="../search.html" />
    <link rel="copyright" title="Copyright" href="../copyright.html" />
    <link rel="next" title="re --- 正規表現操作" href="re.html" />
    <link rel="prev" title="テキスト処理サービス" href="text.html" />
    
      <script defer data-domain="docs.python.org" src="https://plausible.io/js/script.js"></script>
    
    <link rel="canonical" href="https://docs.python.org/3/library/string.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
<link rel="stylesheet" href="../_static/pydoctheme_dark.css" media="(prefers-color-scheme: dark)" id="pydoctheme_dark_css">
    <link rel="shortcut icon" type="image/png" href="../_static/py.svg" />
            <script type="text/javascript" src="../_static/copybutton.js"></script>
            <script type="text/javascript" src="../_static/menu.js"></script>
            <script type="text/javascript" src="../_static/search-focus.js"></script>
            <script type="text/javascript" src="../_static/themetoggle.js"></script> 
<meta name="readthedocs-addons-api-version" content="1">
<script type="text/javascript">
 function onSwitch(event) {
     const option = event.target.selectedIndex;
     const item = event.target.options[option];
     window.location.href = item.dataset.url;
 }

 document.addEventListener("readthedocs-addons-data-ready", function(event) {
   const config = event.detail.data()

   // Add some mocked hardcoded versions pointing to the official
   // documentation while migrating to Read the Docs.
   // These are only for testing purposes.
   // TODO: remove them when managing all the versions on Read the Docs,
   // since all the "active, built and not hidden" versions will be shown automatically.
   let versions = config.versions.active.concat([
       {
           slug: "dev (3.13)",
           urls: {
               documentation: "https://docs.python.org/3.13/",
           }
       },
       {
           slug: "3.12",
           urls: {
               documentation: "https://docs.python.org/3.12/",
           }
       },
       {
           slug: "3.11",
           urls: {
               documentation: "https://docs.python.org/3.11/",
           }
       },
   ]);

   const versionSelect = `
   <select id="version_select">
   ${ versions.map(
       (version) => `
       <option
           value="${ version.slug }"
           ${ config.versions.current.slug === version.slug ? 'selected="selected"' : '' }
           data-url="${ version.urls.documentation }">
           ${ version.slug }
       </option>`
   ).join("\n") }
   </select>
   `;

   // Prepend the current language to the options on the selector
   let languages = config.projects.translations.concat(config.projects.current);
   languages = languages.sort((a, b) => a.language.name.localeCompare(b.language.name));

   const languageSelect = `
   <select id="language_select">
   ${ languages.map(
       (translation) => `
       <option
           value="${ translation.slug }"
           ${ config.projects.current.slug === translation.slug ? 'selected="selected"' : '' }
           data-url="${ translation.urls.documentation }">
           ${ translation.language.name }
       </option>`
   ).join("\n") }
   </select>
   `;

   // Query all the placeholders because there are different ones for Desktop/Mobile
   const versionPlaceholders = document.querySelectorAll(".version_switcher_placeholder");
   for (placeholder of versionPlaceholders) {
       placeholder.innerHTML = versionSelect;
       let selectElement = placeholder.querySelector("select");
       selectElement.addEventListener("change", onSwitch);
   }

   const languagePlaceholders = document.querySelectorAll(".language_switcher_placeholder");
   for (placeholder of languagePlaceholders) {
       placeholder.innerHTML = languageSelect;
       let selectElement = placeholder.querySelector("select");
       selectElement.addEventListener("change", onSwitch);
   }
 });
</script>

  </head>
<body>
<div class="mobile-nav">
    <input type="checkbox" id="menuToggler" class="toggler__input" aria-controls="navigation"
           aria-pressed="false" aria-expanded="false" role="button" aria-label="Menu" />
    <nav class="nav-content" role="navigation">
        <label for="menuToggler" class="toggler__label">
            <span></span>
        </label>
        <span class="nav-items-wrapper">
            <a href="https://www.python.org/" class="nav-logo">
                <img src="../_static/py.svg" alt="Python logo"/>
            </a>
            <span class="version_switcher_placeholder"></span>
            <form role="search" class="search" action="../search.html" method="get">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" class="search-icon">
                    <path fill-rule="nonzero" fill="currentColor" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
                </svg>
                <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" />
                <input type="submit" value="検索"/>
            </form>
        </span>
    </nav>
    <div class="menu-wrapper">
        <nav class="menu" role="navigation" aria-label="main navigation">
            <div class="language_switcher_placeholder"></div>
            
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label>
  <div>
    <h3><a href="../contents.html">目次</a></h3>
    <ul>
<li><a class="reference internal" href="#"><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code> --- 一般的な文字列操作</a><ul>
<li><a class="reference internal" href="#string-constants">文字列定数</a></li>
<li><a class="reference internal" href="#custom-string-formatting">カスタムの文字列書式化</a></li>
<li><a class="reference internal" href="#format-string-syntax">書式指定文字列の文法</a><ul>
<li><a class="reference internal" href="#format-specification-mini-language">書式指定ミニ言語仕様</a></li>
<li><a class="reference internal" href="#format-examples">書式指定例</a></li>
</ul>
</li>
<li><a class="reference internal" href="#template-strings">テンプレート文字列</a></li>
<li><a class="reference internal" href="#helper-functions">ヘルパー関数</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>前のトピックへ</h4>
    <p class="topless"><a href="text.html"
                          title="前の章へ">テキスト処理サービス</a></p>
  </div>
  <div>
    <h4>次のトピックへ</h4>
    <p class="topless"><a href="re.html"
                          title="次の章へ"><code class="xref py py-mod docutils literal notranslate"><span class="pre">re</span></code> --- 正規表現操作</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>このページ</h3>
    <ul class="this-page-menu">
      <li><a href="../bugs.html">バグ報告</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/library/string.rst"
            rel="nofollow">ソースの表示
        </a>
      </li>
    </ul>
  </div>
        </nav>
    </div>
</div>

  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>ナビゲーション</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="総合索引"
             accesskey="I">索引</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Pythonモジュール索引"
             >モジュール</a> |</li>
        <li class="right" >
          <a href="re.html" title="re --- 正規表現操作"
             accesskey="N">次へ</a> |</li>
        <li class="right" >
          <a href="text.html" title="テキスト処理サービス"
             accesskey="P">前へ</a> |</li>

          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"/></li>
          <li><a href="https://www.python.org/">Python</a> &#187;</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"></div>
            <div class="version_switcher_placeholder"></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="../index.html">3.12.4 Documentation</a> &#187;
    </li>

          <li class="nav-item nav-item-1"><a href="index.html" >Python 標準ライブラリ</a> &#187;</li>
          <li class="nav-item nav-item-2"><a href="text.html" accesskey="U">テキスト処理サービス</a> &#187;</li>
        <li class="nav-item nav-item-this"><a href=""><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code> --- 一般的な文字列操作</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="../search.html" method="get">
          <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" id="search-box" />
          <input type="submit" value="検索" />
        </form>
    </div>
                     |
                </li>
            <li class="right">
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label> |</li>
            
      </ul>
    </div>    

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <section id="module-string">
<span id="string-common-string-operations"></span><h1><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code> --- 一般的な文字列操作<a class="headerlink" href="#module-string" title="Link to this heading">¶</a></h1>
<p><strong>ソースコード:</strong> <a class="reference external" href="https://github.com/python/cpython/tree/3.12/Lib/string.py">Lib/string.py</a></p>
<hr class="docutils" />
<div class="admonition seealso">
<p class="admonition-title">参考</p>
<p><a class="reference internal" href="stdtypes.html#textseq"><span class="std std-ref">テキストシーケンス型 --- str</span></a></p>
<p><a class="reference internal" href="stdtypes.html#string-methods"><span class="std std-ref">文字列メソッド</span></a></p>
</div>
<section id="string-constants">
<h2>文字列定数<a class="headerlink" href="#string-constants" title="Link to this heading">¶</a></h2>
<p>このモジュールで定義されている定数は以下の通りです:</p>
<dl class="py data">
<dt class="sig sig-object py" id="string.ascii_letters">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">ascii_letters</span></span><a class="headerlink" href="#string.ascii_letters" title="Link to this definition">¶</a></dt>
<dd><p>後述の <a class="reference internal" href="#string.ascii_lowercase" title="string.ascii_lowercase"><code class="xref py py-const docutils literal notranslate"><span class="pre">ascii_lowercase</span></code></a> と <a class="reference internal" href="#string.ascii_uppercase" title="string.ascii_uppercase"><code class="xref py py-const docutils literal notranslate"><span class="pre">ascii_uppercase</span></code></a> を合わせたもの。この値はロケールに依存しません。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.ascii_lowercase">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">ascii_lowercase</span></span><a class="headerlink" href="#string.ascii_lowercase" title="Link to this definition">¶</a></dt>
<dd><p>小文字 <code class="docutils literal notranslate"><span class="pre">'abcdefghijklmnopqrstuvwxyz'</span></code> 。この値はロケールに依存せず、固定です。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.ascii_uppercase">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">ascii_uppercase</span></span><a class="headerlink" href="#string.ascii_uppercase" title="Link to this definition">¶</a></dt>
<dd><p>大文字 <code class="docutils literal notranslate"><span class="pre">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></code> 。この値はロケールに依存せず、固定です。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.digits">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">digits</span></span><a class="headerlink" href="#string.digits" title="Link to this definition">¶</a></dt>
<dd><p>文字列 <code class="docutils literal notranslate"><span class="pre">'0123456789'</span></code> です。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.hexdigits">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">hexdigits</span></span><a class="headerlink" href="#string.hexdigits" title="Link to this definition">¶</a></dt>
<dd><p>文字列 <code class="docutils literal notranslate"><span class="pre">'0123456789abcdefABCDEF'</span></code> です。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.octdigits">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">octdigits</span></span><a class="headerlink" href="#string.octdigits" title="Link to this definition">¶</a></dt>
<dd><p>文字列 <code class="docutils literal notranslate"><span class="pre">'01234567'</span></code> です。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.punctuation">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">punctuation</span></span><a class="headerlink" href="#string.punctuation" title="Link to this definition">¶</a></dt>
<dd><p><code class="docutils literal notranslate"><span class="pre">C</span></code> ロケールにおいて、区切り文字 (punctuation characters) として扱われる ASCII 文字の文字列です: <code class="docutils literal notranslate"><span class="pre">!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?&#64;[\]^_`{|}~</span></code>.</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.printable">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">printable</span></span><a class="headerlink" href="#string.printable" title="Link to this definition">¶</a></dt>
<dd><p>印刷可能な ASCII 文字で構成される文字列です。 <a class="reference internal" href="#string.digits" title="string.digits"><code class="xref py py-const docutils literal notranslate"><span class="pre">digits</span></code></a>, <a class="reference internal" href="#string.ascii_letters" title="string.ascii_letters"><code class="xref py py-const docutils literal notranslate"><span class="pre">ascii_letters</span></code></a>, <a class="reference internal" href="#string.punctuation" title="string.punctuation"><code class="xref py py-const docutils literal notranslate"><span class="pre">punctuation</span></code></a> および <a class="reference internal" href="#string.whitespace" title="string.whitespace"><code class="xref py py-const docutils literal notranslate"><span class="pre">whitespace</span></code></a> を組み合わせたものです。</p>
</dd></dl>

<dl class="py data">
<dt class="sig sig-object py" id="string.whitespace">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">whitespace</span></span><a class="headerlink" href="#string.whitespace" title="Link to this definition">¶</a></dt>
<dd><p>空白 (whitespace) として扱われる ASCII 文字全てを含む文字列です。ほとんどのシステムでは、これはスペース (space)、タブ (tab)、改行 (linefeed)、復帰 (return)、改頁 (formfeed)、垂直タブ (vertical tab) です。</p>
</dd></dl>

</section>
<section id="custom-string-formatting">
<span id="string-formatting"></span><h2>カスタムの文字列書式化<a class="headerlink" href="#custom-string-formatting" title="Link to this heading">¶</a></h2>
<p>組み込みの文字列 (string) クラスには、 <span class="target" id="index-20"></span><a class="pep reference external" href="https://peps.python.org/pep-3101/"><strong>PEP 3101</strong></a> で記述されている <a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> メソッドによって複雑な変数置換と値のフォーマットを行う機能があります。 <a class="reference internal" href="#module-string" title="string: Common string operations."><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code></a> モジュールの <a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> クラスでは、組み込みの <a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> メソッドと同じ実装を使用して、独自の文字列フォーマットの振る舞いを作成してカスタマイズすることができます。</p>
<dl class="py class">
<dt class="sig sig-object py" id="string.Formatter">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">Formatter</span></span><a class="headerlink" href="#string.Formatter" title="Link to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> クラスは、以下のメソッドを持ちます:</p>
<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.format">
<span class="sig-name descname"><span class="pre">format</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">format_string</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">*</span></span><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.format" title="Link to this definition">¶</a></dt>
<dd><p>主要な API メソッドです。書式文字列と、任意の位置引数およびキーワード引数のセットを取ります。これは、<a class="reference internal" href="#string.Formatter.vformat" title="string.Formatter.vformat"><code class="xref py py-meth docutils literal notranslate"><span class="pre">vformat()</span></code></a> を呼び出す単なるラッパーです。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.7 で変更: </span>書式文字列は <a class="reference internal" href="../glossary.html#positional-only-parameter"><span class="std std-ref">位置専用</span></a> の引数となりました。</p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.vformat">
<span class="sig-name descname"><span class="pre">vformat</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">format_string</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.vformat" title="Link to this definition">¶</a></dt>
<dd><p>この関数はフォーマットの実際の仕事をします。この関数は、 <code class="docutils literal notranslate"><span class="pre">*args</span></code> および <code class="docutils literal notranslate"><span class="pre">**kwargs</span></code> シンタックスを使用して、辞書を個々の引数として unpack してから再度 pack するのではなく、引数としてあらかじめ用意した辞書を渡したい場合のために、独立した関数として公開されます。 <a class="reference internal" href="#string.Formatter.vformat" title="string.Formatter.vformat"><code class="xref py py-meth docutils literal notranslate"><span class="pre">vformat()</span></code></a> は、書式文字列を文字データと置換フィールドに分解する仕事をします。それは、以下に記述する様々なメソッドを呼び出します。</p>
</dd></dl>

<p>さらに、 <a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> ではサブクラスによって置き換えられることを意図した次のようないくつかのメソッドが定義されています。</p>
<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.parse">
<span class="sig-name descname"><span class="pre">parse</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">format_string</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.parse" title="Link to this definition">¶</a></dt>
<dd><p>format_stringを探査し、タプル、 (<em>literal_text</em>, <em>field_name</em>, <em>format_spec</em>, <em>conversion</em>) のイテラブルを返します。これは <a class="reference internal" href="#string.Formatter.vformat" title="string.Formatter.vformat"><code class="xref py py-meth docutils literal notranslate"><span class="pre">vformat()</span></code></a> が文字列を文字としての文字データや置換フィールドに展開するために使用されます。</p>
<p>タプルの値は、概念的に文字としての文字データと、それに続く単一の置換フィールドを表現します。文字としての文字データが無い場合は (ふたつの置換フィールドが連続した場合などに起き得ます) 、 <em>literal_text</em> は長さが 0 の文字列となります。置換フィールドが無い場合は、 <em>field_name</em>, <em>format_spec</em> および <em>conversion</em> が <code class="docutils literal notranslate"><span class="pre">None</span></code> となります。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.get_field">
<span class="sig-name descname"><span class="pre">get_field</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">field_name</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.get_field" title="Link to this definition">¶</a></dt>
<dd><p>引数として与えた <a class="reference internal" href="#string.Formatter.parse" title="string.Formatter.parse"><code class="xref py py-meth docutils literal notranslate"><span class="pre">parse()</span></code></a> (上記参照) により返される <em>field_name</em> を書式指定対象オブジェクトに変換します。返り値はタプル、 (obj, used_key) です。デフォルトでは <span class="target" id="index-21"></span><a class="pep reference external" href="https://peps.python.org/pep-3101/"><strong>PEP 3101</strong></a> に規定される &quot;0[name]&quot; や &quot;label.title&quot; のような形式の文字列を引数としてとります。 <em>args</em> と <em>kwargs</em> は <a class="reference internal" href="#string.Formatter.vformat" title="string.Formatter.vformat"><code class="xref py py-meth docutils literal notranslate"><span class="pre">vformat()</span></code></a> に渡されます。返り値 <em>used_key</em> は、 <a class="reference internal" href="#string.Formatter.get_value" title="string.Formatter.get_value"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_value()</span></code></a> の <em>key</em> 引数と同じ意味を持ちます。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.get_value">
<span class="sig-name descname"><span class="pre">get_value</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">key</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.get_value" title="Link to this definition">¶</a></dt>
<dd><p>与えられたフィールドの値を取り出します。 <em>key</em> 引数は整数でも文字列でも構いません。整数の場合は、位置引数 <em>args</em> のインデックス番号を示します。文字列の場合は、名前付きの引数 <em>kwargs</em> を意味します。</p>
<p><em>args</em> 引数は、 <a class="reference internal" href="#string.Formatter.vformat" title="string.Formatter.vformat"><code class="xref py py-meth docutils literal notranslate"><span class="pre">vformat()</span></code></a> への位置引数のリストに設定され、 <em>kwargs</em> 引数は、キーワード引数の辞書に設定されます。</p>
<p>フィールド名が (ピリオドで区切られた) いくつかの要素からなっている場合、最初の要素のみがこれらの関数に渡されます。残りの要素に関しては、通常の属性またはインデックスアクセスと同様に処理されます。</p>
<p>つまり、例えば、フィールドが '0.name' と表現されるとき、 <a class="reference internal" href="#string.Formatter.get_value" title="string.Formatter.get_value"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_value()</span></code></a> は、 <em>key</em> 引数が 0 として呼び出されます。属性 <code class="docutils literal notranslate"><span class="pre">name</span></code> は、組み込みの <a class="reference internal" href="functions.html#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a> 関数が呼び出され、 <a class="reference internal" href="#string.Formatter.get_value" title="string.Formatter.get_value"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_value()</span></code></a> が返されたのちに検索されます。</p>
<p>インデックスまたはキーワードが存在しないアイテムを参照した場合、 <a class="reference internal" href="exceptions.html#IndexError" title="IndexError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IndexError</span></code></a> または <a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> が送出されます。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.check_unused_args">
<span class="sig-name descname"><span class="pre">check_unused_args</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">used_args</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">args</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">kwargs</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.check_unused_args" title="Link to this definition">¶</a></dt>
<dd><p>希望に応じて未使用の引数がないか確認する機能を実装します。この関数への引数は、書式指定文字列で実際に参照されるすべての引数のキーの set (位置引数の整数、名前付き引数の文字列) と、vformat に渡される <em>args</em> と <em>kwargs</em> への参照です。使用されない引数の set は、これらのパラメータから計算されます。 <a class="reference internal" href="#string.Formatter.check_unused_args" title="string.Formatter.check_unused_args"><code class="xref py py-meth docutils literal notranslate"><span class="pre">check_unused_args()</span></code></a> は、確認の結果が偽である場合に例外を送出するものとみなされます。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.format_field">
<span class="sig-name descname"><span class="pre">format_field</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">format_spec</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.format_field" title="Link to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="#string.Formatter.format_field" title="string.Formatter.format_field"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format_field()</span></code></a> は単純に組み込みのグローバル関数 <a class="reference internal" href="functions.html#format" title="format"><code class="xref py py-func docutils literal notranslate"><span class="pre">format()</span></code></a> を呼び出します。このメソッドは、サブクラスをオーバーライドするために提供されます。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Formatter.convert_field">
<span class="sig-name descname"><span class="pre">convert_field</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">value</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">conversion</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Formatter.convert_field" title="Link to this definition">¶</a></dt>
<dd><p>(<a class="reference internal" href="#string.Formatter.get_field" title="string.Formatter.get_field"><code class="xref py py-meth docutils literal notranslate"><span class="pre">get_field()</span></code></a> が返す) 値を (<a class="reference internal" href="#string.Formatter.parse" title="string.Formatter.parse"><code class="xref py py-meth docutils literal notranslate"><span class="pre">parse()</span></code></a> メソッドが返すタプルの形式で) 与えられた変換タイプとして変換します。デフォルトバージョンは 's' (str), 'r' (repr), 'a' (ascii) 変換タイプを理解します。</p>
</dd></dl>

</dd></dl>

</section>
<section id="format-string-syntax">
<span id="formatstrings"></span><h2>書式指定文字列の文法<a class="headerlink" href="#format-string-syntax" title="Link to this heading">¶</a></h2>
<p><a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.format()</span></code></a> メソッドと <a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> クラスは、文字列の書式指定に同じ文法を共有します (ただし、 <a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> サブクラスでは、独自の書式指定文法を定義することが可能です)。
この文法は <a class="reference internal" href="../reference/lexical_analysis.html#f-strings"><span class="std std-ref">フォーマット済み文字列リテラル</span></a> の文法と関係してはいますが、少し洗練されておらず、特に任意の式がサポートされていません。</p>
<p id="index-2">書式指定文字列は波括弧 <code class="docutils literal notranslate"><span class="pre">{}</span></code> に囲まれた &quot;置換フィールド&quot; を含みます。波括弧に囲まれた部分以外は全て単純な文字として扱われ、変更を加えることなく出力へコピーされます。波括弧を文字として扱う必要がある場合は、二重にすることでエスケープすることができます: <code class="docutils literal notranslate"><span class="pre">{{</span></code> および <code class="docutils literal notranslate"><span class="pre">}}</span></code> 。</p>
<p>置換フィールドの文法は以下です:</p>
<pre>
<strong id="grammar-token-format-string-replacement_field">replacement_field</strong> ::=  &quot;{&quot; [<a class="reference internal" href="#grammar-token-format-string-field_name"><code class="xref docutils literal notranslate"><span class="pre">field_name</span></code></a>] [&quot;!&quot; <a class="reference internal" href="#grammar-token-format-string-conversion"><code class="xref docutils literal notranslate"><span class="pre">conversion</span></code></a>] [&quot;:&quot; <a class="reference internal" href="#grammar-token-format-string-format_spec"><code class="xref docutils literal notranslate"><span class="pre">format_spec</span></code></a>] &quot;}&quot;
<strong id="grammar-token-format-string-field_name">field_name       </strong> ::=  <a class="reference internal" href="#grammar-token-format-string-arg_name"><code class="xref docutils literal notranslate"><span class="pre">arg_name</span></code></a> (&quot;.&quot; <a class="reference internal" href="#grammar-token-format-string-attribute_name"><code class="xref docutils literal notranslate"><span class="pre">attribute_name</span></code></a> | &quot;[&quot; <a class="reference internal" href="#grammar-token-format-string-element_index"><code class="xref docutils literal notranslate"><span class="pre">element_index</span></code></a> &quot;]&quot;)*
<strong id="grammar-token-format-string-arg_name">arg_name         </strong> ::=  [<a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-identifier"><code class="xref docutils literal notranslate"><span class="pre">identifier</span></code></a> | <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-digit"><code class="xref docutils literal notranslate"><span class="pre">digit</span></code></a>+]
<strong id="grammar-token-format-string-attribute_name">attribute_name   </strong> ::=  <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-identifier"><code class="xref docutils literal notranslate"><span class="pre">identifier</span></code></a>
<strong id="grammar-token-format-string-element_index">element_index    </strong> ::=  <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-digit"><code class="xref docutils literal notranslate"><span class="pre">digit</span></code></a>+ | <a class="reference internal" href="#grammar-token-format-string-index_string"><code class="xref docutils literal notranslate"><span class="pre">index_string</span></code></a>
<strong id="grammar-token-format-string-index_string">index_string     </strong> ::=  &lt;any source character except &quot;]&quot;&gt; +
<strong id="grammar-token-format-string-conversion">conversion       </strong> ::=  &quot;r&quot; | &quot;s&quot; | &quot;a&quot;
<strong id="grammar-token-format-string-format_spec">format_spec      </strong> ::=  <a class="reference internal" href="#grammar-token-format-spec-format_spec"><code class="xref docutils literal notranslate"><span class="pre">format-spec:format_spec</span></code></a>
</pre>
<p>もっと簡単にいうと、置換フィールドは <em>field_name</em> で始められます。これによって指定したオブジェクトの値が、置換フィールドの代わりに書式化され出力に挿入されます。<em>field_name</em> の後に、感嘆符 <code class="docutils literal notranslate"><span class="pre">'!'</span></code> を挟んで <em>conversion</em> フィールドを続けることができます。最後にコロン <code class="docutils literal notranslate"><span class="pre">':'</span></code> を挟んで、 <em>format_spec</em> を書くことができます。これは、置換される値の非デフォルトの書式を指定します。</p>
<p><a class="reference internal" href="#formatspec"><span class="std std-ref">書式指定ミニ言語仕様</span></a> 節も参照して下さい。</p>
<p><em>field_name</em> それ自身は、数かキーワードのいずれかである <em>arg_name</em> から始まります。それが数である場合、位置引数を参照します。また、それがキーワードである場合、指定されたキーワード引数を参照します。文字列に対して <a class="reference internal" href="stdtypes.html#str.isdecimal" title="str.isdecimal"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.isdecimal()</span></code></a> を呼び出した結果が真の場合、 <em>arg_name</em> は数として扱われます。書式文字列中で数の arg_names が順に 0, 1, 2, ... である場合、それらはすべて (いくつかではありません) 省略することができます。そして数 0, 1, 2, ... は、自動的にその順で挿入されます。 <em>arg_name</em> は引用符で区切られていないので、書式文字列内の任意の辞書キー (例えば文字列 <code class="docutils literal notranslate"><span class="pre">'10'</span></code> や <code class="docutils literal notranslate"><span class="pre">':-]'</span></code> など) を指定することはできません。 <em>arg_name</em> の後に任意の数のインデックス式または属性式を続けることができます。 <code class="docutils literal notranslate"><span class="pre">'.name'</span></code> 形式の式は <a class="reference internal" href="functions.html#getattr" title="getattr"><code class="xref py py-func docutils literal notranslate"><span class="pre">getattr()</span></code></a> を使用して指定された属性を選択します。一方、 <code class="docutils literal notranslate"><span class="pre">'[index]'</span></code> 形式の式は <a class="reference internal" href="../reference/datamodel.html#object.__getitem__" title="object.__getitem__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__getitem__()</span></code></a> を使用してインデックス参照を行います。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.1 で変更: </span><a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.format()</span></code></a> を使い、位置引数指定を省略することができます。
<code class="docutils literal notranslate"><span class="pre">'{}</span> <span class="pre">{}'.format(a,</span> <span class="pre">b)</span></code> は <code class="docutils literal notranslate"><span class="pre">'{0}</span> <span class="pre">{1}'.format(a,</span> <span class="pre">b)</span></code> と同じになります。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.4 で変更: </span><a class="reference internal" href="#string.Formatter" title="string.Formatter"><code class="xref py py-class docutils literal notranslate"><span class="pre">Formatter</span></code></a> を使い、位置引数指定を省略することができます。</p>
</div>
<p>簡単な書式指定文字列の例を挙げます:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="s2">&quot;First, thou shalt count to </span><span class="si">{0}</span><span class="s2">&quot;</span>  <span class="c1"># References first positional argument</span>
<span class="s2">&quot;Bring me a </span><span class="si">{}</span><span class="s2">&quot;</span>                   <span class="c1"># Implicitly references the first positional argument</span>
<span class="s2">&quot;From </span><span class="si">{}</span><span class="s2"> to </span><span class="si">{}</span><span class="s2">&quot;</span>                   <span class="c1"># Same as &quot;From {0} to {1}&quot;</span>
<span class="s2">&quot;My quest is </span><span class="si">{name}</span><span class="s2">&quot;</span>              <span class="c1"># References keyword argument &#39;name&#39;</span>
<span class="s2">&quot;Weight in tons </span><span class="si">{0.weight}</span><span class="s2">&quot;</span>       <span class="c1"># &#39;weight&#39; attribute of first positional arg</span>
<span class="s2">&quot;Units destroyed: </span><span class="si">{players[0]}</span><span class="s2">&quot;</span>   <span class="c1"># First element of keyword argument &#39;players&#39;.</span>
</pre></div>
</div>
<p><em>置換 (conversion)</em> フィールドにより書式変換前に型の強制変換が実施されます。通常、値の書式変換は <a class="reference internal" href="../reference/datamodel.html#object.__format__" title="object.__format__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__format__()</span></code></a> によって実施されます。しかしながら、場合によっては、文字列として変換することを強制したり、書式指定の定義をオーバーライドしたくなることもあります。 <a class="reference internal" href="../reference/datamodel.html#object.__format__" title="object.__format__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__format__()</span></code></a> の呼び出し前に値を文字列に変換すると、通常の書式変換の処理は飛ばされます。</p>
<p>現在 3つの変換フラグがサポートされています: 値に対して <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> を呼ぶ <code class="docutils literal notranslate"><span class="pre">'!s'</span></code> 、 <a class="reference internal" href="functions.html#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> を呼ぶ <code class="docutils literal notranslate"><span class="pre">'!r'</span></code> 、 <a class="reference internal" href="functions.html#ascii" title="ascii"><code class="xref py py-func docutils literal notranslate"><span class="pre">ascii()</span></code></a> を呼ぶ <code class="docutils literal notranslate"><span class="pre">'!a'</span></code>。</p>
<p>いくつかの例です:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="s2">&quot;Harold&#39;s a clever </span><span class="si">{0!s}</span><span class="s2">&quot;</span>        <span class="c1"># Calls str() on the argument first</span>
<span class="s2">&quot;Bring out the holy </span><span class="si">{name!r}</span><span class="s2">&quot;</span>    <span class="c1"># Calls repr() on the argument first</span>
<span class="s2">&quot;More </span><span class="si">{!a}</span><span class="s2">&quot;</span>                      <span class="c1"># Calls ascii() on the argument first</span>
</pre></div>
</div>
<p><em>format_spec</em> フィールドは、フィールド幅、文字揃え、埋め方、精度などの、値を表現する仕様を含みます。それぞれの値の型は、 &quot;formatting mini-language&quot; 、または、 <em>format_spec</em> の実装で定義されます。</p>
<p>ほとんどの組み込み型は、次のセクションに記載された共通の formatting mini-language をサポートします。</p>
<p><em>format_spec</em> フィールド内には入れ子になった置換フィールドを含めることもできます。入れ子になった置換フィールドにはフィールド名、変換フラグ、書式指定を含めることができますが、さらに入れ子の階層を含めることはできません。 format_spec 中の置換フィールドは <em>format_spec</em> 文字列が解釈される前に置き換えられます。これにより、値の書式を動的に指定することができます。</p>
<p><a class="reference internal" href="#formatexamples"><span class="std std-ref">書式指定例</span></a> のいくつかの例も参照して下さい。</p>
<section id="format-specification-mini-language">
<span id="formatspec"></span><h3>書式指定ミニ言語仕様<a class="headerlink" href="#format-specification-mini-language" title="Link to this heading">¶</a></h3>
<p>書式指定 (&quot;Format specifications&quot;) は書式指定文字列の個々の値を表現する方法を指定するための、置換フィールドで使用されます (<a class="reference internal" href="#formatstrings"><span class="std std-ref">書式指定文字列の文法</span></a> および <a class="reference internal" href="../reference/lexical_analysis.html#f-strings"><span class="std std-ref">f-strings</span></a> を参照してください) 。
それらは、組み込み関数の <a class="reference internal" href="functions.html#format" title="format"><code class="xref py py-func docutils literal notranslate"><span class="pre">format()</span></code></a> 関数に直接渡されます。
それぞれの書式指定可能な型について、書式指定がどのように解釈されるかが規定されます。</p>
<p>多くの組み込み型は、書式指定に関して以下のオプションを実装します。しかしながら、いくつかの書式指定オプションは数値型でのみサポートされます。</p>
<p>一般的な取り決めとして、空の書式指定は、値に対して <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> を呼び出したときと同じ結果を与えます。通常、空でない書式指定はその結果を変更します。</p>
<p>一般的な書式指定子 (<em>standard format specifier</em>) の書式は以下です:</p>
<pre>
<strong id="grammar-token-format-spec-format_spec">format_spec    </strong> ::=  [[<a class="reference internal" href="#grammar-token-format-spec-fill"><code class="xref docutils literal notranslate"><span class="pre">fill</span></code></a>]<a class="reference internal" href="#grammar-token-format-spec-align"><code class="xref docutils literal notranslate"><span class="pre">align</span></code></a>][<a class="reference internal" href="#grammar-token-format-spec-sign"><code class="xref docutils literal notranslate"><span class="pre">sign</span></code></a>][&quot;z&quot;][&quot;#&quot;][&quot;0&quot;][<a class="reference internal" href="#grammar-token-format-spec-width"><code class="xref docutils literal notranslate"><span class="pre">width</span></code></a>][<a class="reference internal" href="#grammar-token-format-spec-grouping_option"><code class="xref docutils literal notranslate"><span class="pre">grouping_option</span></code></a>][&quot;.&quot; <a class="reference internal" href="#grammar-token-format-spec-precision"><code class="xref docutils literal notranslate"><span class="pre">precision</span></code></a>][<a class="reference internal" href="#grammar-token-format-spec-type"><code class="xref docutils literal notranslate"><span class="pre">type</span></code></a>]
<strong id="grammar-token-format-spec-fill">fill           </strong> ::=  &lt;any character&gt;
<strong id="grammar-token-format-spec-align">align          </strong> ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;
<strong id="grammar-token-format-spec-sign">sign           </strong> ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;
<strong id="grammar-token-format-spec-width">width          </strong> ::=  <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-digit"><code class="xref docutils literal notranslate"><span class="pre">digit</span></code></a>+
<strong id="grammar-token-format-spec-grouping_option">grouping_option</strong> ::=  &quot;_&quot; | &quot;,&quot;
<strong id="grammar-token-format-spec-precision">precision      </strong> ::=  <a class="reference internal" href="../reference/lexical_analysis.html#grammar-token-python-grammar-digit"><code class="xref docutils literal notranslate"><span class="pre">digit</span></code></a>+
<strong id="grammar-token-format-spec-type">type           </strong> ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;
</pre>
<p>有効な <em>align</em> 値を指定する場合、その前に <em>fill</em> 文字を付けることができます。
この文字には任意の文字を指定でき、省略された場合はデフォルトの空白文字となります。
<a class="reference internal" href="../reference/lexical_analysis.html#f-strings"><span class="std std-ref">formatted string literal</span></a> の中や <a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.format()</span></code></a> メソッドを使う場合はリテラルの波括弧 (&quot;<code class="docutils literal notranslate"><span class="pre">{</span></code>&quot; と &quot;<code class="docutils literal notranslate"><span class="pre">}</span></code>&quot;) を <em>fill</em> 文字として使えないことに注意してください。
ただし、波括弧を入れ子になった置換フィールド内に挿入することはできます。
この制限は <a class="reference internal" href="functions.html#format" title="format"><code class="xref py py-func docutils literal notranslate"><span class="pre">format()</span></code></a> 関数には影響しません。</p>
<p>様々な align オプションの意味は以下のとおりです:</p>
<table class="docutils align-default" id="index-3">
<thead>
<tr class="row-odd"><th class="head"><p>オプション</p></th>
<th class="head"><p>意味</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'&lt;'</span></code></p></td>
<td><p>利用可能なスペースにおいて、左詰めを強制します (ほとんどのオブジェクトにおいてのデフォルト)。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'&gt;'</span></code></p></td>
<td><p>利用可能なスペースにおいて、右詰めを強制します (いくつかのオブジェクトにおいてのデフォルト)。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'='</span></code></p></td>
<td><p>符号 (があれば) の後ろを埋めます。 '+000000120' のような形で表示されます。このオプションは数値型に対してのみ有効です。フィールド幅の直前が '0' の時はこれがデフォルトの数値になります。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'^'</span></code></p></td>
<td><p>利用可能なスペースにおいて、中央寄せを強制します。</p></td>
</tr>
</tbody>
</table>
<p>最小のフィールド幅が定義されない限り、フィールド幅はデータを表示するために必要な幅と同じになることに注意して下さい。そのため、その場合には、 align オプションは意味を持ちません。</p>
<p><em>sign</em> オプションは数値型に対してのみ有効であり、以下のうちのひとつとなります:</p>
<table class="docutils align-default" id="index-4">
<thead>
<tr class="row-odd"><th class="head"><p>オプション</p></th>
<th class="head"><p>意味</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'+'</span></code></p></td>
<td><p>符号の使用を、正数、負数の両方に対して指定します。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'-'</span></code></p></td>
<td><p>符号の使用を、負数に対してのみ指定します (デフォルトの挙動です)。</p></td>
</tr>
<tr class="row-even"><td><p>空白</p></td>
<td><p>空白を正数の前に付け、負号を負数の前に使用することを指定します。</p></td>
</tr>
</tbody>
</table>
<p id="index-5"><code class="docutils literal notranslate"><span class="pre">'z'</span></code> オプションはマイナス0の浮動小数点数をフォーマットの制度で丸めたあとにプラス0に強制的に変換します。このオプションは浮動小数点数型に対してのみ有効です。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.11 で変更: </span><code class="docutils literal notranslate"><span class="pre">'z'</span></code> オプションが追加されました (<span class="target" id="index-22"></span><a class="pep reference external" href="https://peps.python.org/pep-0682/"><strong>PEP 682</strong></a> も参照)。</p>
</div>
<p id="index-7"><code class="docutils literal notranslate"><span class="pre">'#'</span></code> オプションは、変換に「別形式」を使用します。別形式は、異なる型に対して違った風に定義されます。このオプションは、整数、浮動小数点数、複素数でのみ有効です。整数に対して2進法、8進法、または16進法の出力が使用される場合、このオプションは出力される値にそれぞれ <code class="docutils literal notranslate"><span class="pre">'0b'</span></code>, <code class="docutils literal notranslate"><span class="pre">'0o'</span></code>, <code class="docutils literal notranslate"><span class="pre">'0x'</span></code>, <code class="docutils literal notranslate"><span class="pre">'0X'</span></code> 接頭辞を加えます。浮動小数点数、複素数については、別形式では、小数点文字の後に数字がなくても変換結果には常に小数点文字が含まれます。通常は、数字が続く場合にのみ小数点文字がこれらの変換結果に現われます。さらに、<code class="docutils literal notranslate"><span class="pre">'g'</span></code> と <code class="docutils literal notranslate"><span class="pre">'G'</span></code> の変換については、最後の 0 は結果から取り除かれません。</p>
<p id="index-8"><code class="docutils literal notranslate"><span class="pre">','</span></code> オプションは、千の位のセパレータにカンマを使うことを合図します。ロケール依存のセパレータには、代わりに <code class="docutils literal notranslate"><span class="pre">'n'</span></code> の整数表現形式を使ってください。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.1 で変更: </span><code class="docutils literal notranslate"><span class="pre">','</span></code> オプションが追加されました (<span class="target" id="index-23"></span><a class="pep reference external" href="https://peps.python.org/pep-0378/"><strong>PEP 378</strong></a> も参照)。</p>
</div>
<p id="index-10"><code class="docutils literal notranslate"><span class="pre">'_'</span></code> オプションは、浮動小数点数の表現型と整数の表現型 <code class="docutils literal notranslate"><span class="pre">'d'</span></code> における千倍ごとの区切り文字にアンダースコアを使うというしるしです。
整数の表現型の <code class="docutils literal notranslate"><span class="pre">'b'</span></code>, <code class="docutils literal notranslate"><span class="pre">'o'</span></code>, <code class="docutils literal notranslate"><span class="pre">'x'</span></code>, <code class="docutils literal notranslate"><span class="pre">'X'</span></code> では、4桁ごとにアンダースコアが挿入されます。
他の表現型でこのオプションを指定するとエラーになります。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.6 で変更: </span><code class="docutils literal notranslate"><span class="pre">'_'</span></code> オプションが追加されました (<span class="target" id="index-24"></span><a class="pep reference external" href="https://peps.python.org/pep-0515/"><strong>PEP 515</strong></a> も参照)。</p>
</div>
<p><em>width</em> は10進数の整数で、接頭辞、セパレータ、他のフォーマット文字を含んだ最小の合計フィールド幅を定義します。指定されない場合、フィールド幅はその内容により決定されます。</p>
<p>alignment が明示的に与えられない場合、 <em>width</em> フィールドにゼロ (<code class="docutils literal notranslate"><span class="pre">'0'</span></code>) 文字を前置することは、数値型のための符号を意識した 0 パディングを可能にします。これは <em>fill</em> 文字に <code class="docutils literal notranslate"><span class="pre">'0'</span></code> を指定して、 <em>alignment</em> タイプに <code class="docutils literal notranslate"><span class="pre">'='</span></code> を指定したことと等価です。</p>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.10 で変更: </span>Preceding the <em>width</em> field by <code class="docutils literal notranslate"><span class="pre">'0'</span></code> no longer affects the default
alignment for strings.</p>
</div>
<p><a href="#id1"><span class="problematic" id="id2">*</span></a>precision*は、表現型``'f'<code class="docutils literal notranslate"><span class="pre">または</span></code>'F'<code class="docutils literal notranslate"><span class="pre">の場合小数点以下、表現型</span></code>'g'<code class="docutils literal notranslate"><span class="pre">または</span></code>'G'<a href="#id3"><span class="problematic" id="id4">``</span></a>の場合は小数点以上と以下が何桁で表示されるべきかを示す10進整数です。文字列の表現型の場合は最大フィールド幅、言い換えるとフィールドの内容から何文字が使用されるかを示します。<a href="#id5"><span class="problematic" id="id6">*</span></a>precision*は整数の表現型には使用できません。</p>
<p>最後に、<em>type</em> は、データがどのように表現されるかを決定します。</p>
<p>利用可能な文字列の表現型は以下です:</p>
<blockquote>
<div><table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>型</p></th>
<th class="head"><p>意味</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'s'</span></code></p></td>
<td><p>文字列。これがデフォルトの値で、多くの場合省略されます。</p></td>
</tr>
<tr class="row-odd"><td><p>None</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'s'</span></code> と同じです。</p></td>
</tr>
</tbody>
</table>
</div></blockquote>
<p>利用可能な整数の表現型は以下です:</p>
<blockquote>
<div><table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>型</p></th>
<th class="head"><p>意味</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'b'</span></code></p></td>
<td><p>2進数。出力される数値は2を基数とします。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'c'</span></code></p></td>
<td><p>文字。数値を対応する Unicode 文字に変換します。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'d'</span></code></p></td>
<td><p>10進数。出力される数値は10を基数とします。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'o'</span></code></p></td>
<td><p>8進数。出力される数値は8を基数とします。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'x'</span></code></p></td>
<td><p>16進数。出力される数値は16を基数とします。 10進で9を超える数字には小文字が使われます。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'X'</span></code></p></td>
<td><p>16進数。出力される数値は16を基数とします。10進で9を超える数字には大文字が使われます。<code class="docutils literal notranslate"><span class="pre">'#'``が指定された場合、接頭辞</span></code>'0x'<code class="docutils literal notranslate"><span class="pre">も大文字</span></code>'0X'<a href="#id1"><span class="problematic" id="id2">``</span></a>になります</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'n'</span></code></p></td>
<td><p>数値。現在のロケールに従い、区切り文字を挿入することを除けば、 <code class="docutils literal notranslate"><span class="pre">'d'</span></code> と同じです。</p></td>
</tr>
<tr class="row-odd"><td><p>None</p></td>
<td><p><code class="docutils literal notranslate"><span class="pre">'d'</span></code> と同じです。</p></td>
</tr>
</tbody>
</table>
</div></blockquote>
<p>これらの表現型に加えて、整数は (<code class="docutils literal notranslate"><span class="pre">'n'</span></code> と <code class="docutils literal notranslate"><span class="pre">None</span></code> を除く) 以下の浮動小数点数の表現型で書式指定できます。
そうすることで整数は書式変換される前に <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-func docutils literal notranslate"><span class="pre">float()</span></code></a> を使って浮動小数点数に変換されます。</p>
<p>利用可能な <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> と <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimal</span></code></a> の表現型は以下です:</p>
<blockquote>
<div><table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>型</p></th>
<th class="head"><p>意味</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'e'</span></code></p></td>
<td><p>Scientific notation. For a given precision <code class="docutils literal notranslate"><span class="pre">p</span></code>,
formats the number in scientific notation with the
letter 'e' separating the coefficient from the exponent.
The coefficient has one digit before and <code class="docutils literal notranslate"><span class="pre">p</span></code> digits
after the decimal point, for a total of <code class="docutils literal notranslate"><span class="pre">p</span> <span class="pre">+</span> <span class="pre">1</span></code>
significant digits. With no precision given, uses a
precision of <code class="docutils literal notranslate"><span class="pre">6</span></code> digits after the decimal point for
<a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a>, and shows all coefficient digits
for <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimal</span></code></a>. If no digits follow the
decimal point, the decimal point is also removed unless
the <code class="docutils literal notranslate"><span class="pre">#</span></code> option is used.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'E'</span></code></p></td>
<td><p>指数表記です。大文字の 'E' を使うことを除いては、 <code class="docutils literal notranslate"><span class="pre">'e'</span></code> と同じです。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'f'</span></code></p></td>
<td><p>Fixed-point notation. For a given precision <code class="docutils literal notranslate"><span class="pre">p</span></code>,
formats the number as a decimal number with exactly
<code class="docutils literal notranslate"><span class="pre">p</span></code> digits following the decimal point. With no
precision given, uses a precision of <code class="docutils literal notranslate"><span class="pre">6</span></code> digits after
the decimal point for <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a>, and uses a
precision large enough to show all coefficient digits
for <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimal</span></code></a>. If no digits follow the
decimal point, the decimal point is also removed unless
the <code class="docutils literal notranslate"><span class="pre">#</span></code> option is used.</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'F'</span></code></p></td>
<td><p>固定小数点数表記です。<code class="docutils literal notranslate"><span class="pre">nan</span></code> が <code class="docutils literal notranslate"><span class="pre">NAN</span></code> に、<code class="docutils literal notranslate"><span class="pre">inf</span></code> が <code class="docutils literal notranslate"><span class="pre">INF</span></code> に変換されることを除き <code class="docutils literal notranslate"><span class="pre">'f'</span></code> と同じです。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'g'</span></code></p></td>
<td><p>General format.  For a given precision <code class="docutils literal notranslate"><span class="pre">p</span> <span class="pre">&gt;=</span> <span class="pre">1</span></code>,
this rounds the number to <code class="docutils literal notranslate"><span class="pre">p</span></code> significant digits and
then formats the result in either fixed-point format
or in scientific notation, depending on its magnitude.
A precision of <code class="docutils literal notranslate"><span class="pre">0</span></code> is treated as equivalent to a
precision of <code class="docutils literal notranslate"><span class="pre">1</span></code>.</p>
<p>The precise rules are as follows: suppose that the
result formatted with presentation type <code class="docutils literal notranslate"><span class="pre">'e'</span></code> and
precision <code class="docutils literal notranslate"><span class="pre">p-1</span></code> would have exponent <code class="docutils literal notranslate"><span class="pre">exp</span></code>.  Then,
if <code class="docutils literal notranslate"><span class="pre">m</span> <span class="pre">&lt;=</span> <span class="pre">exp</span> <span class="pre">&lt;</span> <span class="pre">p</span></code>, where <code class="docutils literal notranslate"><span class="pre">m</span></code> is -4 for floats and -6
for <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimals</span></code></a>, the number is
formatted with presentation type <code class="docutils literal notranslate"><span class="pre">'f'</span></code> and precision
<code class="docutils literal notranslate"><span class="pre">p-1-exp</span></code>.  Otherwise, the number is formatted
with presentation type <code class="docutils literal notranslate"><span class="pre">'e'</span></code> and precision <code class="docutils literal notranslate"><span class="pre">p-1</span></code>.
In both cases insignificant trailing zeros are removed
from the significand, and the decimal point is also
removed if there are no remaining digits following it,
unless the <code class="docutils literal notranslate"><span class="pre">'#'</span></code> option is used.</p>
<p>With no precision given, uses a precision of <code class="docutils literal notranslate"><span class="pre">6</span></code>
significant digits for <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a>. For
<a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimal</span></code></a>, the coefficient of the result
is formed from the coefficient digits of the value;
scientific notation is used for values smaller than
<code class="docutils literal notranslate"><span class="pre">1e-6</span></code> in absolute value and values where the place
value of the least significant digit is larger than 1,
and fixed-point notation is used otherwise.</p>
<p>正と負の無限大と 0 および NaN は精度に関係なくそれぞれ <code class="docutils literal notranslate"><span class="pre">inf</span></code>, <code class="docutils literal notranslate"><span class="pre">-inf</span></code>, <code class="docutils literal notranslate"><span class="pre">0</span></code>, <code class="docutils literal notranslate"><span class="pre">-0</span></code> および <code class="docutils literal notranslate"><span class="pre">nan</span></code> となります。</p>
</td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'G'</span></code></p></td>
<td><p>汎用フォーマットです。数値が大きくなったとき、 <code class="docutils literal notranslate"><span class="pre">'E'</span></code> に切り替わることを除き、 <code class="docutils literal notranslate"><span class="pre">'g'</span></code> と同じです。無限大と NaN の表示も大文字になります。</p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">'n'</span></code></p></td>
<td><p>数値です。現在のロケールに合わせて、数値分割文字が挿入されることを除き、 <code class="docutils literal notranslate"><span class="pre">'g'</span></code> と同じです。</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">'%'</span></code></p></td>
<td><p>パーセンテージです。数値は 100 倍され、固定小数点数フォーマット (<code class="docutils literal notranslate"><span class="pre">'f'</span></code>) でパーセント記号付きで表示されます。</p></td>
</tr>
<tr class="row-even"><td><p>None</p></td>
<td><p>For <a class="reference internal" href="functions.html#float" title="float"><code class="xref py py-class docutils literal notranslate"><span class="pre">float</span></code></a> this is the same as <code class="docutils literal notranslate"><span class="pre">'g'</span></code>, except
that when fixed-point notation is used to format the
result, it always includes at least one digit past the
decimal point. The precision used is as large as needed
to represent the given value faithfully.</p>
<p>For <a class="reference internal" href="decimal.html#decimal.Decimal" title="decimal.Decimal"><code class="xref py py-class docutils literal notranslate"><span class="pre">Decimal</span></code></a>, this is the same as
either <code class="docutils literal notranslate"><span class="pre">'g'</span></code> or <code class="docutils literal notranslate"><span class="pre">'G'</span></code> depending on the value of
<code class="docutils literal notranslate"><span class="pre">context.capitals</span></code> for the current decimal context.</p>
<p>The overall effect is to match the output of <a class="reference internal" href="stdtypes.html#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a>
as altered by the other format modifiers.</p>
</td>
</tr>
</tbody>
</table>
</div></blockquote>
</section>
<section id="format-examples">
<span id="formatexamples"></span><h3>書式指定例<a class="headerlink" href="#format-examples" title="Link to this heading">¶</a></h3>
<p>この節では、 <a class="reference internal" href="stdtypes.html#str.format" title="str.format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.format()</span></code></a> 構文の例を紹介し、さらに従来の <code class="docutils literal notranslate"><span class="pre">%</span></code>-書式と比較します。</p>
<p>多くの場合、新構文に <code class="docutils literal notranslate"><span class="pre">{}</span></code> を加え、 <code class="docutils literal notranslate"><span class="pre">%</span></code> の代わりに <code class="docutils literal notranslate"><span class="pre">:</span></code> を使うことで、古い <code class="docutils literal notranslate"><span class="pre">%</span></code>-書式に類似した書式になります。例えば、<code class="docutils literal notranslate"><span class="pre">'%03.2f'</span></code> は <code class="docutils literal notranslate"><span class="pre">'{:03.2f}'</span></code> と変換できます。</p>
<p>以下の例で示すように、新構文はさらに新たに様々なオプションもサポートしています。</p>
<p>位置引数を使ったアクセス:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{0}</span><span class="s1">, </span><span class="si">{1}</span><span class="s1">, </span><span class="si">{2}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
<span class="go">&#39;a, b, c&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{}</span><span class="s1">, </span><span class="si">{}</span><span class="s1">, </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>  <span class="c1"># 3.1+ only</span>
<span class="go">&#39;a, b, c&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{2}</span><span class="s1">, </span><span class="si">{1}</span><span class="s1">, </span><span class="si">{0}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">)</span>
<span class="go">&#39;c, b, a&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{2}</span><span class="s1">, </span><span class="si">{1}</span><span class="s1">, </span><span class="si">{0}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="s1">&#39;abc&#39;</span><span class="p">)</span>      <span class="c1"># unpacking argument sequence</span>
<span class="go">&#39;c, b, a&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{0}{1}{0}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;abra&#39;</span><span class="p">,</span> <span class="s1">&#39;cad&#39;</span><span class="p">)</span>   <span class="c1"># arguments&#39; indices can be repeated</span>
<span class="go">&#39;abracadabra&#39;</span>
</pre></div>
</div>
<p>名前を使ったアクセス:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;Coordinates: </span><span class="si">{latitude}</span><span class="s1">, </span><span class="si">{longitude}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">latitude</span><span class="o">=</span><span class="s1">&#39;37.24N&#39;</span><span class="p">,</span> <span class="n">longitude</span><span class="o">=</span><span class="s1">&#39;-115.81W&#39;</span><span class="p">)</span>
<span class="go">&#39;Coordinates: 37.24N, -115.81W&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">coord</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;latitude&#39;</span><span class="p">:</span> <span class="s1">&#39;37.24N&#39;</span><span class="p">,</span> <span class="s1">&#39;longitude&#39;</span><span class="p">:</span> <span class="s1">&#39;-115.81W&#39;</span><span class="p">}</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;Coordinates: </span><span class="si">{latitude}</span><span class="s1">, </span><span class="si">{longitude}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">coord</span><span class="p">)</span>
<span class="go">&#39;Coordinates: 37.24N, -115.81W&#39;</span>
</pre></div>
</div>
<p>引数の属性へのアクセス:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">c</span> <span class="o">=</span> <span class="mi">3</span><span class="o">-</span><span class="mi">5</span><span class="n">j</span>
<span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="s1">&#39;The complex number </span><span class="si">{0}</span><span class="s1"> is formed from the real part </span><span class="si">{0.real}</span><span class="s1"> &#39;</span>
<span class="gp">... </span> <span class="s1">&#39;and the imaginary part </span><span class="si">{0.imag}</span><span class="s1">.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="go">&#39;The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
<span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
<span class="gp">... </span>    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="gp">... </span>        <span class="k">return</span> <span class="s1">&#39;Point(</span><span class="si">{self.x}</span><span class="s1">, </span><span class="si">{self.y}</span><span class="s1">)&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">=</span><span class="bp">self</span><span class="p">)</span>
<span class="gp">...</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">Point</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
<span class="go">&#39;Point(4, 2)&#39;</span>
</pre></div>
</div>
<p>引数の要素へのアクセス:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">coord</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;X: </span><span class="si">{0[0]}</span><span class="s1">;  Y: </span><span class="si">{0[1]}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">coord</span><span class="p">)</span>
<span class="go">&#39;X: 3;  Y: 5&#39;</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">%s</span></code> と <code class="docutils literal notranslate"><span class="pre">%r</span></code> の置き換え:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s2">&quot;repr() shows quotes: </span><span class="si">{!r}</span><span class="s2">; str() doesn&#39;t: </span><span class="si">{!s}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;test1&#39;</span><span class="p">,</span> <span class="s1">&#39;test2&#39;</span><span class="p">)</span>
<span class="go">&quot;repr() shows quotes: &#39;test1&#39;; str() doesn&#39;t: test2&quot;</span>
</pre></div>
</div>
<p>テキストの幅を指定した整列:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:&lt;30}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;left aligned&#39;</span><span class="p">)</span>
<span class="go">&#39;left aligned                  &#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:&gt;30}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;right aligned&#39;</span><span class="p">)</span>
<span class="go">&#39;                 right aligned&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:^30}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;centered&#39;</span><span class="p">)</span>
<span class="go">&#39;           centered           &#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:*^30}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;centered&#39;</span><span class="p">)</span>  <span class="c1"># use &#39;*&#39; as a fill char</span>
<span class="go">&#39;***********centered***********&#39;</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">%+f</span></code> と <code class="docutils literal notranslate"><span class="pre">%-f</span></code>, <code class="docutils literal notranslate"><span class="pre">%</span> <span class="pre">f</span></code> の置換、そして符号の指定:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:+f}</span><span class="s1">; </span><span class="si">{:+f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mf">3.14</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.14</span><span class="p">)</span>  <span class="c1"># show it always</span>
<span class="go">&#39;+3.140000; -3.140000&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{: f}</span><span class="s1">; </span><span class="si">{: f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mf">3.14</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.14</span><span class="p">)</span>  <span class="c1"># show a space for positive numbers</span>
<span class="go">&#39; 3.140000; -3.140000&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:-f}</span><span class="s1">; </span><span class="si">{:-f}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mf">3.14</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.14</span><span class="p">)</span>  <span class="c1"># show only the minus -- same as &#39;{:f}; {:f}&#39;</span>
<span class="go">&#39;3.140000; -3.140000&#39;</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">%x</span></code> と <code class="docutils literal notranslate"><span class="pre">%o</span></code> の置換、そして値に対する異なる底の変換:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="c1"># format also supports binary numbers</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s2">&quot;int: </span><span class="si">{0:d}</span><span class="s2">;  hex: </span><span class="si">{0:x}</span><span class="s2">;  oct: </span><span class="si">{0:o}</span><span class="s2">;  bin: </span><span class="si">{0:b}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">&#39;int: 42;  hex: 2a;  oct: 52;  bin: 101010&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="c1"># with 0x, 0o, or 0b as prefix:</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s2">&quot;int: </span><span class="si">{0:d}</span><span class="s2">;  hex: </span><span class="si">{0:#x}</span><span class="s2">;  oct: </span><span class="si">{0:#o}</span><span class="s2">;  bin: </span><span class="si">{0:#b}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="go">&#39;int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010&#39;</span>
</pre></div>
</div>
<p>千の位のセパレータにカンマを使用する:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:,}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">1234567890</span><span class="p">)</span>
<span class="go">&#39;1,234,567,890&#39;</span>
</pre></div>
</div>
<p>パーセントを表示する:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="n">points</span> <span class="o">=</span> <span class="mi">19</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">total</span> <span class="o">=</span> <span class="mi">22</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;Correct answers: </span><span class="si">{:.2%}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">points</span><span class="o">/</span><span class="n">total</span><span class="p">)</span>
<span class="go">&#39;Correct answers: 86.36%&#39;</span>
</pre></div>
</div>
<p>型特有の書式指定を使う:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">datetime</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2010</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">58</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;{:%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="go">&#39;2010-07-04 12:15:58&#39;</span>
</pre></div>
</div>
<p>引数をネストする、さらに複雑な例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">align</span><span class="p">,</span> <span class="n">text</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="s1">&#39;&lt;^&gt;&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;left&#39;</span><span class="p">,</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="s1">&#39;right&#39;</span><span class="p">]):</span>
<span class="gp">... </span>    <span class="s1">&#39;{0:</span><span class="si">{fill}{align}</span><span class="s1">16}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">align</span><span class="p">,</span> <span class="n">align</span><span class="o">=</span><span class="n">align</span><span class="p">)</span>
<span class="gp">...</span>
<span class="go">&#39;left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39;</span>
<span class="go">&#39;^^^^^center^^^^^&#39;</span>
<span class="go">&#39;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;right&#39;</span>
<span class="gp">&gt;&gt;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">octets</span> <span class="o">=</span> <span class="p">[</span><span class="mi">192</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s1">&#39;</span><span class="si">{:02X}{:02X}{:02X}{:02X}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">*</span><span class="n">octets</span><span class="p">)</span>
<span class="go">&#39;C0A80001&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
<span class="go">3232235521</span>
<span class="gp">&gt;&gt;&gt;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">width</span> <span class="o">=</span> <span class="mi">5</span>
<span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">12</span><span class="p">):</span> 
<span class="gp">... </span>    <span class="k">for</span> <span class="n">base</span> <span class="ow">in</span> <span class="s1">&#39;dXob&#39;</span><span class="p">:</span>
<span class="gp">... </span>        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;{0:</span><span class="si">{width}{base}</span><span class="s1">}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="n">base</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
<span class="gp">... </span>    <span class="nb">print</span><span class="p">()</span>
<span class="gp">...</span>
<span class="go">    5     5     5   101</span>
<span class="go">    6     6     6   110</span>
<span class="go">    7     7     7   111</span>
<span class="go">    8     8    10  1000</span>
<span class="go">    9     9    11  1001</span>
<span class="go">   10     A    12  1010</span>
<span class="go">   11     B    13  1011</span>
</pre></div>
</div>
</section>
</section>
<section id="template-strings">
<span id="id1"></span><h2>テンプレート文字列<a class="headerlink" href="#template-strings" title="Link to this heading">¶</a></h2>
<p>テンプレート文字列では <span class="target" id="index-25"></span><a class="pep reference external" href="https://peps.python.org/pep-0292/"><strong>PEP 292</strong></a> で解説されている単純な文字列置換ができます。
テンプレート文字列の主な使い道は国際化 (i18n) です。というのは、その国際化の文脈において、より簡潔な文法と機能を持つテンプレート文字列を使うと、 Python にある他の組み込みの文字列フォーマット機能よりも翻訳がしやすいからです。
テンプレート文字列の上に構築された国際化のためのライプラリの例として、 <a class="reference external" href="https://flufli18n.readthedocs.io/en/latest/">flufl.i18n</a> を調べてみてください。</p>
<p id="index-13">テンプレート文字列は <code class="docutils literal notranslate"><span class="pre">$</span></code> に基づいた置換をサポートしていて、次の規則が使われています:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">$$</span></code> はエスケープ文字です; <code class="docutils literal notranslate"><span class="pre">$</span></code> 一つに置換されます。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">$identifier</span></code> は <code class="docutils literal notranslate"><span class="pre">&quot;identifier&quot;</span></code> のマッピングキーに合致する置換プレースホルダーを指定します。デフォルトでは、 <code class="docutils literal notranslate"><span class="pre">&quot;identifier&quot;</span></code> は大文字と小文字を区別しない ASCII 英数字 (アンダースコアを含む) からなら文字列に制限されています。文字列はアンダースコアか ASCII 文字から始まるものでなければなりません。<code class="docutils literal notranslate"><span class="pre">$</span></code> の後に識別子に使えない文字が出現すると、そこでプレースホルダ名の指定が終わります。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">${identifier}</span></code> は <code class="docutils literal notranslate"><span class="pre">$identifier</span></code> と同じです。プレースホルダ名の後ろに識別子として使える文字列が続いていて、それをプレースホルダ名の一部として扱いたくない場合、例えば <code class="docutils literal notranslate"><span class="pre">&quot;${noun}ification&quot;</span></code> のような場合に必要な書き方です。</p></li>
</ul>
<p>上記以外の書き方で文字列中に <code class="docutils literal notranslate"><span class="pre">$</span></code> を使うと <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> を送出します。</p>
<p><a class="reference internal" href="#module-string" title="string: Common string operations."><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code></a> モジュールでは、上記のような規則を実装した <a class="reference internal" href="#string.Template" title="string.Template"><code class="xref py py-class docutils literal notranslate"><span class="pre">Template</span></code></a> クラスを提供しています。 <a class="reference internal" href="#string.Template" title="string.Template"><code class="xref py py-class docutils literal notranslate"><span class="pre">Template</span></code></a> のメソッドを以下に示します:</p>
<dl class="py class">
<dt class="sig sig-object py" id="string.Template">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">Template</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">template</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Template" title="Link to this definition">¶</a></dt>
<dd><p>コンストラクタはテンプレート文字列になる引数を一つだけ取ります。</p>
<dl class="py method">
<dt class="sig sig-object py" id="string.Template.substitute">
<span class="sig-name descname"><span class="pre">substitute</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mapping</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{}</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwds</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Template.substitute" title="Link to this definition">¶</a></dt>
<dd><p>テンプレート置換を行い、新たな文字列を生成して返します。<em>mapping</em> はテンプレート中のプレースホルダに対応するキーを持つような任意の辞書類似オブジェクトです。辞書を指定する代わりに、キーワード引数も指定でき、その場合にはキーワードをプレースホルダ名に対応させます。<em>mapping</em> と <em>kwds</em> の両方が指定され、内容が重複した場合には、<em>kwds</em> に指定したプレースホルダを優先します。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Template.safe_substitute">
<span class="sig-name descname"><span class="pre">safe_substitute</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">mapping</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">{}</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">/</span></span></em>, <em class="sig-param"><span class="o"><span class="pre">**</span></span><span class="n"><span class="pre">kwds</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.Template.safe_substitute" title="Link to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="#string.Template.substitute" title="string.Template.substitute"><code class="xref py py-meth docutils literal notranslate"><span class="pre">substitute()</span></code></a> と同じですが、プレースホルダに対応するものを <em>mapping</em> や <em>kwds</em> から見つけられなかった場合に、 <a class="reference internal" href="exceptions.html#KeyError" title="KeyError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyError</span></code></a> 例外を送出する代わりにもとのプレースホルダがそのまま入ります。また、 <a class="reference internal" href="#string.Template.substitute" title="string.Template.substitute"><code class="xref py py-meth docutils literal notranslate"><span class="pre">substitute()</span></code></a> とは違い、規則外の書き方で <code class="docutils literal notranslate"><span class="pre">$</span></code> を使った場合でも、 <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> を送出せず単に <code class="docutils literal notranslate"><span class="pre">$</span></code> を返します。</p>
<p>その他の例外も発生し得る一方で、このメソッドが「安全 (safe) 」と呼ばれているのは、置換操作は常に、例外を送出する代わりに利用可能な文字列を返そうとするからです。別の見方をすれば、 <a class="reference internal" href="#string.Template.safe_substitute" title="string.Template.safe_substitute"><code class="xref py py-meth docutils literal notranslate"><span class="pre">safe_substitute()</span></code></a> は区切り間違いによるぶら下がり (dangling delimiter) や波括弧の非対応、 Python の識別子として無効なプレースホルダ名を含むような不正なテンプレートを何も警告せずに無視するため、安全とはいえないのです。</p>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Template.is_valid">
<span class="sig-name descname"><span class="pre">is_valid</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#string.Template.is_valid" title="Link to this definition">¶</a></dt>
<dd><p>Returns false if the template has invalid placeholders that will cause
<a class="reference internal" href="#string.Template.substitute" title="string.Template.substitute"><code class="xref py py-meth docutils literal notranslate"><span class="pre">substitute()</span></code></a> to raise <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a>.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="string.Template.get_identifiers">
<span class="sig-name descname"><span class="pre">get_identifiers</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#string.Template.get_identifiers" title="Link to this definition">¶</a></dt>
<dd><p>Returns a list of the valid identifiers in the template, in the order
they first appear, ignoring any invalid identifiers.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.11.</span></p>
</div>
</dd></dl>

<p><a class="reference internal" href="#string.Template" title="string.Template"><code class="xref py py-class docutils literal notranslate"><span class="pre">Template</span></code></a> のインスタンスは、次のような public な属性を提供しています:</p>
<dl class="py attribute">
<dt class="sig sig-object py" id="string.Template.template">
<span class="sig-name descname"><span class="pre">template</span></span><a class="headerlink" href="#string.Template.template" title="Link to this definition">¶</a></dt>
<dd><p>コンストラクタの引数 <em>template</em> に渡されたオブジェクトです。通常、この値を変更すべきではありませんが、読み出し専用アクセスを強制しているわけではありません。</p>
</dd></dl>

</dd></dl>

<p>Templateの使い方の例を以下に示します:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">Template</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s</span> <span class="o">=</span> <span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$who likes $what&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">s</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">who</span><span class="o">=</span><span class="s1">&#39;tim&#39;</span><span class="p">,</span> <span class="n">what</span><span class="o">=</span><span class="s1">&#39;kung pao&#39;</span><span class="p">)</span>
<span class="go">&#39;tim likes kung pao&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">who</span><span class="o">=</span><span class="s1">&#39;tim&#39;</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;Give $who $100&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">ValueError</span>: <span class="n">Invalid placeholder in string: line 1, col 11</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$who likes $what&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">substitute</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="gt">Traceback (most recent call last):</span>
<span class="c">...</span>
<span class="gr">KeyError</span>: <span class="n">&#39;what&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Template</span><span class="p">(</span><span class="s1">&#39;$who likes $what&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">safe_substitute</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
<span class="go">&#39;tim likes $what&#39;</span>
</pre></div>
</div>
<p>さらに進んだ使い方: <a class="reference internal" href="#string.Template" title="string.Template"><code class="xref py py-class docutils literal notranslate"><span class="pre">Template</span></code></a> のサブクラスを派生して、プレースホルダの書式、区切り文字、テンプレート文字列の解釈に使われている正規表現全体をカスタマイズできます。こうした作業には、以下のクラス属性をオーバライドします:</p>
<ul>
<li><p><em>delimiter</em> -- プレースホルダの開始を示すリテラル文字列です。
デフォルトの値は <code class="docutils literal notranslate"><span class="pre">$</span></code> です。
実装系はこの文字列に対して必要に応じて <a class="reference internal" href="re.html#re.escape" title="re.escape"><code class="xref py py-meth docutils literal notranslate"><span class="pre">re.escape()</span></code></a> を呼び出すので、正規表現になってしまうような文字列にしては <em>なりません</em> 。
さらにクラスを作成した後に delimiter を変更できない (つまり、別の delimiter を設定したいのであれば、サブクラスの名前空間で行わなければならない) ことに注意してください。</p></li>
<li><p><em>idpattern</em> -- This is the regular expression describing the pattern for
non-braced placeholders.  The default value is the regular expression
<code class="docutils literal notranslate"><span class="pre">(?a:[_a-z][_a-z0-9]*)</span></code>.  If this is given and <em>braceidpattern</em> is
<code class="docutils literal notranslate"><span class="pre">None</span></code> this pattern will also apply to braced placeholders.</p>
<div class="admonition note">
<p class="admonition-title">注釈</p>
<p><em>flags</em> のデフォルトは <code class="docutils literal notranslate"><span class="pre">re.IGNORECASE</span></code> なので、 <code class="docutils literal notranslate"><span class="pre">[a-z]</span></code> というパターンはいくつかの非 ASCII 文字に適合できます。
そのため、ここではローカルの <code class="docutils literal notranslate"><span class="pre">a</span></code> フラグを使っています。</p>
</div>
<div class="versionchanged">
<p><span class="versionmodified changed">バージョン 3.7 で変更: </span><em>braceidpattern</em> を使用すると、中括弧の内側と外側で使用する別々のパターンを定義できます。</p>
</div>
</li>
<li><p><em>braceidpattern</em> -- This is like <em>idpattern</em> but describes the pattern for
braced placeholders.  Defaults to <code class="docutils literal notranslate"><span class="pre">None</span></code> which means to fall back to
<em>idpattern</em> (i.e. the same pattern is used both inside and outside braces).
If given, this allows you to define different patterns for braced and
unbraced placeholders.</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.7.</span></p>
</div>
</li>
<li><p><em>flags</em> -- 代入の認識のために使用される正規表現をコンパイルする際に適用される正規表現フラグ。デフォルト値は <code class="docutils literal notranslate"><span class="pre">re.IGNORECASE</span></code> です。<code class="docutils literal notranslate"><span class="pre">re.VERBOSE</span></code> が常にフラグに追加されるということに注意してください。したがって、カスタムな <em>idpattern</em> は verbose 正規表現の規約に従わなければなりません。</p>
<div class="versionadded">
<p><span class="versionmodified added">Added in version 3.2.</span></p>
</div>
</li>
</ul>
<p>他にも、クラス属性 <em>pattern</em> をオーバライドして、正規表現パターン全体を指定できます。オーバライドを行う場合、 <em>pattern</em> の値は 4 つの名前つきキャプチャグループ (capturing group) を持った正規表現オブジェクトでなければなりません。これらのキャプチャグループは、上で説明した規則と、無効なプレースホルダに対する規則に対応しています:</p>
<ul class="simple">
<li><p><em>escaped</em> -- このグループはエスケープシーケンス、すなわちデフォルトパターンにおける <code class="docutils literal notranslate"><span class="pre">$$</span></code> に対応します。</p></li>
<li><p><em>named</em> -- このグループは波括弧でくくらないプレースホルダ名に対応します; キャプチャグループに区切り文字を含めてはなりません。</p></li>
<li><p><em>braced</em> -- このグループは波括弧でくくったプレースホルダ名に対応します; キャプチャグループに区切り文字を含めてはなりません。</p></li>
<li><p><em>invalid</em> -- このグループはそのほかの区切り文字のパターン (通常は区切り文字一つ) に対応し、正規表現の末尾に出現しなければなりません。</p></li>
</ul>
<p>The methods on this class will raise <a class="reference internal" href="exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> if the pattern matches
the template without one of these named groups matching.</p>
</section>
<section id="helper-functions">
<h2>ヘルパー関数<a class="headerlink" href="#helper-functions" title="Link to this heading">¶</a></h2>
<dl class="py function">
<dt class="sig sig-object py" id="string.capwords">
<span class="sig-prename descclassname"><span class="pre">string.</span></span><span class="sig-name descname"><span class="pre">capwords</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">s</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">sep</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span><a class="headerlink" href="#string.capwords" title="Link to this definition">¶</a></dt>
<dd><p><a class="reference internal" href="stdtypes.html#str.split" title="str.split"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.split()</span></code></a> を使って引数を単語に分割し、 <a class="reference internal" href="stdtypes.html#str.capitalize" title="str.capitalize"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.capitalize()</span></code></a> を使ってそれぞれの単語の先頭の文字を大文字に変換し、 <a class="reference internal" href="stdtypes.html#str.join" title="str.join"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.join()</span></code></a> を使ってつなぎ合わせます。オプションの第2引数 <em>sep</em> が与えられないか <code class="docutils literal notranslate"><span class="pre">None</span></code> の場合、この置換処理は文字列中の連続する空白文字をスペース一つに置き換え、先頭と末尾の空白を削除します、それ以外の場合には <em>sep</em> は split と join に使われます。</p>
</dd></dl>

</section>
</section>


            <div class="clearer"></div>
          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <div>
    <h3><a href="../contents.html">目次</a></h3>
    <ul>
<li><a class="reference internal" href="#"><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code> --- 一般的な文字列操作</a><ul>
<li><a class="reference internal" href="#string-constants">文字列定数</a></li>
<li><a class="reference internal" href="#custom-string-formatting">カスタムの文字列書式化</a></li>
<li><a class="reference internal" href="#format-string-syntax">書式指定文字列の文法</a><ul>
<li><a class="reference internal" href="#format-specification-mini-language">書式指定ミニ言語仕様</a></li>
<li><a class="reference internal" href="#format-examples">書式指定例</a></li>
</ul>
</li>
<li><a class="reference internal" href="#template-strings">テンプレート文字列</a></li>
<li><a class="reference internal" href="#helper-functions">ヘルパー関数</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>前のトピックへ</h4>
    <p class="topless"><a href="text.html"
                          title="前の章へ">テキスト処理サービス</a></p>
  </div>
  <div>
    <h4>次のトピックへ</h4>
    <p class="topless"><a href="re.html"
                          title="次の章へ"><code class="xref py py-mod docutils literal notranslate"><span class="pre">re</span></code> --- 正規表現操作</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>このページ</h3>
    <ul class="this-page-menu">
      <li><a href="../bugs.html">バグ報告</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/library/string.rst"
            rel="nofollow">ソースの表示
        </a>
      </li>
    </ul>
  </div>
        </div>
<div id="sidebarbutton" title="サイドバーをたたむ">
<span>«</span>
</div>

      </div>
      <div class="clearer"></div>
    </div>  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>ナビゲーション</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="総合索引"
             >索引</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Pythonモジュール索引"
             >モジュール</a> |</li>
        <li class="right" >
          <a href="re.html" title="re --- 正規表現操作"
             >次へ</a> |</li>
        <li class="right" >
          <a href="text.html" title="テキスト処理サービス"
             >前へ</a> |</li>

          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"/></li>
          <li><a href="https://www.python.org/">Python</a> &#187;</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"></div>
            <div class="version_switcher_placeholder"></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="../index.html">3.12.4 Documentation</a> &#187;
    </li>

          <li class="nav-item nav-item-1"><a href="index.html" >Python 標準ライブラリ</a> &#187;</li>
          <li class="nav-item nav-item-2"><a href="text.html" >テキスト処理サービス</a> &#187;</li>
        <li class="nav-item nav-item-this"><a href=""><code class="xref py py-mod docutils literal notranslate"><span class="pre">string</span></code> --- 一般的な文字列操作</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="../search.html" method="get">
          <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" id="search-box" />
          <input type="submit" value="検索" />
        </form>
    </div>
                     |
                </li>
            <li class="right">
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label> |</li>
            
      </ul>
    </div>  
    <div class="footer">
    &copy; 
      <a href="../copyright.html">
    
    Copyright
    
      </a>
     2001-2024, Python Software Foundation.
    <br />
    This page is licensed under the Python Software Foundation License Version 2.
    <br />
    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.
    <br />
    
      See <a href="/license.html">History and License</a> for more information.<br />
    
    
    <br />

    The Python Software Foundation is a non-profit corporation.
<a href="https://www.python.org/psf/donations/">Please donate.</a>
<br />
    <br />
      最終更新: Jun 11, 2024 (04:44 UTC)
    
      <a href="/bugs.html">Found a bug</a>?
    
    <br />

    Created using <a href="https://www.sphinx-doc.org/">Sphinx</a> 7.3.7.
    </div>

    <script type="text/javascript" src="../_static/switchers.js"></script>
  </body>
</html>