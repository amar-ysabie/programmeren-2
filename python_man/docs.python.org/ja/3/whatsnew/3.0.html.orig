<!DOCTYPE html>

<html lang="ja" data-content_root="../">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
<meta property="og:title" content="What's New In Python 3.0" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://docs.python.org/3/whatsnew/3.0.html" />
<meta property="og:site_name" content="Python documentation" />
<meta property="og:description" content="著者, Guido van Rossum,. この記事では 2.6 と比較した Python 3.0 での新機能を解説します。 Python 3.0、あるいは &quot;Python 3000&quot;、 &quot;Py3K&quot; は初めて 意図的に後方非互換にした Python のリリースです。 Python 3.0 は2008年12月3日にリリースされました。 通常のリリースよりも多くの変更があり、全ての Pyth..." />
<meta property="og:image" content="https://docs.python.org/3/_static/og-image.png" />
<meta property="og:image:alt" content="Python documentation" />
<meta name="description" content="著者, Guido van Rossum,. この記事では 2.6 と比較した Python 3.0 での新機能を解説します。 Python 3.0、あるいは &quot;Python 3000&quot;、 &quot;Py3K&quot; は初めて 意図的に後方非互換にした Python のリリースです。 Python 3.0 は2008年12月3日にリリースされました。 通常のリリースよりも多くの変更があり、全ての Pyth..." />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta name="theme-color" content="#3776ab" />

    <title>What&#39;s New In Python 3.0 &#8212; Python 3.12.4 ドキュメント</title><meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" type="text/css" href="../_static/pygments.css?v=80d5e7a1" />
    <link rel="stylesheet" type="text/css" href="../_static/pydoctheme.css?v=bb723527" />
    <link id="pygments_dark_css" media="(prefers-color-scheme: dark)" rel="stylesheet" type="text/css" href="../_static/pygments_dark.css?v=b20cc3f5" />
    
    <script src="../_static/documentation_options.js?v=7e11ab17"></script>
    <script src="../_static/doctools.js?v=9a2dae69"></script>
    <script src="../_static/sphinx_highlight.js?v=dc90522c"></script>
    <script src="../_static/translations.js?v=4dbe4bdc"></script>
    
    <script src="../_static/sidebar.js"></script>
    
    <link rel="search" type="application/opensearchdescription+xml"
          title="Python 3.12.4 ドキュメント 内を検索"
          href="../_static/opensearch.xml"/>
    <link rel="author" title="このドキュメントについて" href="../about.html" />
    <link rel="index" title="索引" href="../genindex.html" />
    <link rel="search" title="検索" href="../search.html" />
    <link rel="copyright" title="Copyright" href="../copyright.html" />
    <link rel="next" title="What&#39;s New in Python 2.7" href="2.7.html" />
    <link rel="prev" title="What&#39;s New In Python 3.1" href="3.1.html" />
    
      <script defer data-domain="docs.python.org" src="https://plausible.io/js/script.js"></script>
    
    <link rel="canonical" href="https://docs.python.org/3/whatsnew/3.0.html" />
    
      
    

    
    <style>
      @media only screen {
        table.full-width-table {
            width: 100%;
        }
      }
    </style>
<link rel="stylesheet" href="../_static/pydoctheme_dark.css" media="(prefers-color-scheme: dark)" id="pydoctheme_dark_css">
    <link rel="shortcut icon" type="image/png" href="../_static/py.svg" />
            <script type="text/javascript" src="../_static/copybutton.js"></script>
            <script type="text/javascript" src="../_static/menu.js"></script>
            <script type="text/javascript" src="../_static/search-focus.js"></script>
            <script type="text/javascript" src="../_static/themetoggle.js"></script> 
<meta name="readthedocs-addons-api-version" content="1">
<script type="text/javascript">
 function onSwitch(event) {
     const option = event.target.selectedIndex;
     const item = event.target.options[option];
     window.location.href = item.dataset.url;
 }

 document.addEventListener("readthedocs-addons-data-ready", function(event) {
   const config = event.detail.data()

   // Add some mocked hardcoded versions pointing to the official
   // documentation while migrating to Read the Docs.
   // These are only for testing purposes.
   // TODO: remove them when managing all the versions on Read the Docs,
   // since all the "active, built and not hidden" versions will be shown automatically.
   let versions = config.versions.active.concat([
       {
           slug: "dev (3.13)",
           urls: {
               documentation: "https://docs.python.org/3.13/",
           }
       },
       {
           slug: "3.12",
           urls: {
               documentation: "https://docs.python.org/3.12/",
           }
       },
       {
           slug: "3.11",
           urls: {
               documentation: "https://docs.python.org/3.11/",
           }
       },
   ]);

   const versionSelect = `
   <select id="version_select">
   ${ versions.map(
       (version) => `
       <option
           value="${ version.slug }"
           ${ config.versions.current.slug === version.slug ? 'selected="selected"' : '' }
           data-url="${ version.urls.documentation }">
           ${ version.slug }
       </option>`
   ).join("\n") }
   </select>
   `;

   // Prepend the current language to the options on the selector
   let languages = config.projects.translations.concat(config.projects.current);
   languages = languages.sort((a, b) => a.language.name.localeCompare(b.language.name));

   const languageSelect = `
   <select id="language_select">
   ${ languages.map(
       (translation) => `
       <option
           value="${ translation.slug }"
           ${ config.projects.current.slug === translation.slug ? 'selected="selected"' : '' }
           data-url="${ translation.urls.documentation }">
           ${ translation.language.name }
       </option>`
   ).join("\n") }
   </select>
   `;

   // Query all the placeholders because there are different ones for Desktop/Mobile
   const versionPlaceholders = document.querySelectorAll(".version_switcher_placeholder");
   for (placeholder of versionPlaceholders) {
       placeholder.innerHTML = versionSelect;
       let selectElement = placeholder.querySelector("select");
       selectElement.addEventListener("change", onSwitch);
   }

   const languagePlaceholders = document.querySelectorAll(".language_switcher_placeholder");
   for (placeholder of languagePlaceholders) {
       placeholder.innerHTML = languageSelect;
       let selectElement = placeholder.querySelector("select");
       selectElement.addEventListener("change", onSwitch);
   }
 });
</script>

  </head>
<body>
<div class="mobile-nav">
    <input type="checkbox" id="menuToggler" class="toggler__input" aria-controls="navigation"
           aria-pressed="false" aria-expanded="false" role="button" aria-label="Menu" />
    <nav class="nav-content" role="navigation">
        <label for="menuToggler" class="toggler__label">
            <span></span>
        </label>
        <span class="nav-items-wrapper">
            <a href="https://www.python.org/" class="nav-logo">
                <img src="../_static/py.svg" alt="Python logo"/>
            </a>
            <span class="version_switcher_placeholder"></span>
            <form role="search" class="search" action="../search.html" method="get">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" class="search-icon">
                    <path fill-rule="nonzero" fill="currentColor" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 001.48-5.34c-.47-2.78-2.79-5-5.59-5.34a6.505 6.505 0 00-7.27 7.27c.34 2.8 2.56 5.12 5.34 5.59a6.5 6.5 0 005.34-1.48l.27.28v.79l4.25 4.25c.41.41 1.08.41 1.49 0 .41-.41.41-1.08 0-1.49L15.5 14zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path>
                </svg>
                <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" />
                <input type="submit" value="検索"/>
            </form>
        </span>
    </nav>
    <div class="menu-wrapper">
        <nav class="menu" role="navigation" aria-label="main navigation">
            <div class="language_switcher_placeholder"></div>
            
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label>
  <div>
    <h3><a href="../contents.html">目次</a></h3>
    <ul>
<li><a class="reference internal" href="#">What's New In Python 3.0</a><ul>
<li><a class="reference internal" href="#common-stumbling-blocks">よくある悩みの種</a><ul>
<li><a class="reference internal" href="#print-is-a-function">print関数</a></li>
<li><a class="reference internal" href="#views-and-iterators-instead-of-lists">リストからビューおよびイテレータへ</a></li>
<li><a class="reference internal" href="#ordering-comparisons">順序比較</a></li>
<li><a class="reference internal" href="#integers">整数</a></li>
<li><a class="reference internal" href="#text-vs-data-instead-of-unicode-vs-8-bit">Unicode 対 8 ビット、ではなく、テキスト対データに</a></li>
</ul>
</li>
<li><a class="reference internal" href="#overview-of-syntax-changes">構文の変更の概要</a><ul>
<li><a class="reference internal" href="#new-syntax">新たな構文</a></li>
<li><a class="reference internal" href="#changed-syntax">変更された構文</a></li>
<li><a class="reference internal" href="#removed-syntax">削除された操作</a></li>
</ul>
</li>
<li><a class="reference internal" href="#changes-already-present-in-python-2-6">Python 2.6 で既にあった変更</a></li>
<li><a class="reference internal" href="#library-changes">ライブラリの変更</a></li>
<li><a class="reference internal" href="#pep-3101-a-new-approach-to-string-formatting"><strong>PEP 3101</strong>: 文字列整形の新たなアプローチ</a></li>
<li><a class="reference internal" href="#changes-to-exceptions">例外に関する変更</a></li>
<li><a class="reference internal" href="#miscellaneous-other-changes">その他の変更</a><ul>
<li><a class="reference internal" href="#operators-and-special-methods">演算子と特殊メソッド</a></li>
<li><a class="reference internal" href="#builtins">組み込み</a></li>
</ul>
</li>
<li><a class="reference internal" href="#build-and-c-api-changes">ビルドならびに C API の変更</a></li>
<li><a class="reference internal" href="#performance">性能</a></li>
<li><a class="reference internal" href="#porting-to-python-3-0">Python 3.0 への移植</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>前のトピックへ</h4>
    <p class="topless"><a href="3.1.html"
                          title="前の章へ">What's New In Python 3.1</a></p>
  </div>
  <div>
    <h4>次のトピックへ</h4>
    <p class="topless"><a href="2.7.html"
                          title="次の章へ">What's New in Python 2.7</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>このページ</h3>
    <ul class="this-page-menu">
      <li><a href="../bugs.html">バグ報告</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst"
            rel="nofollow">ソースの表示
        </a>
      </li>
    </ul>
  </div>
        </nav>
    </div>
</div>

  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>ナビゲーション</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="総合索引"
             accesskey="I">索引</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Pythonモジュール索引"
             >モジュール</a> |</li>
        <li class="right" >
          <a href="2.7.html" title="What&#39;s New in Python 2.7"
             accesskey="N">次へ</a> |</li>
        <li class="right" >
          <a href="3.1.html" title="What&#39;s New In Python 3.1"
             accesskey="P">前へ</a> |</li>

          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"/></li>
          <li><a href="https://www.python.org/">Python</a> &#187;</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"></div>
            <div class="version_switcher_placeholder"></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="../index.html">3.12.4 Documentation</a> &#187;
    </li>

          <li class="nav-item nav-item-1"><a href="index.html" accesskey="U">What's New in Python</a> &#187;</li>
        <li class="nav-item nav-item-this"><a href="">What's New In Python 3.0</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="../search.html" method="get">
          <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" id="search-box" />
          <input type="submit" value="検索" />
        </form>
    </div>
                     |
                </li>
            <li class="right">
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label> |</li>
            
      </ul>
    </div>    

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <section id="what-s-new-in-python-3-0">
<h1>What's New In Python 3.0<a class="headerlink" href="#what-s-new-in-python-3-0" title="Link to this heading">¶</a></h1>
<dl class="field-list simple">
<dt class="field-odd">著者<span class="colon">:</span></dt>
<dd class="field-odd"><p>Guido van Rossum</p>
</dd>
</dl>
<p>この記事では 2.6 と比較した Python 3.0 での新機能を解説します。
Python 3.0、あるいは &quot;Python 3000&quot;、 &quot;Py3K&quot; は初めて <em>意図的に後方非互換にした</em> Python のリリースです。
Python 3.0 は2008年12月3日にリリースされました。
通常のリリースよりも多くの変更があり、全ての Python ユーザにとって重要です。
しかし、変更について理解したら Python に実際にはそれほど変更がないことが分かるでしょう。
全体的に見れば、よく知られた悩みの種が概ね解決され、昔の粗雑なものが取り除かれています。</p>
<p>この記事は全ての新機能を完璧な仕様を示そうとはしませんが、便利な概要については説明しようとしています。
全詳細については Python 3.0 のドキュメントや、本編で引かれている多くの PEP を参照してください。
特定の機能の実装や設計原理について完全に理解したいなら、通常のドキュメントよりも詳しいことが書いてある PEP を見るとよいでしょう。
しかし、一旦機能が完全に実装されると、普通 PEP は最新の状態に保たれないことに注意してください。</p>
<p>この文書で全項目に触れるべきなのですが、時間の制約のためそうではありません。
いつもの新リリースのように、 ソース配布の <cite>Misc/NEWS</cite> には些細な変更についても詳細な情報があります。</p>
<section id="common-stumbling-blocks">
<h2>よくある悩みの種<a class="headerlink" href="#common-stumbling-blocks" title="Link to this heading">¶</a></h2>
<p>このセクションは Python 2.5 に慣れていたら躓いてしまいそうな少数の変更の一覧です。</p>
<section id="print-is-a-function">
<h3>print関数<a class="headerlink" href="#print-is-a-function" title="Link to this heading">¶</a></h3>
<p><code class="docutils literal notranslate"><span class="pre">print</span></code> 文は <a class="reference internal" href="../library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a> 関数に置き換えられ、古い <code class="docutils literal notranslate"><span class="pre">print</span></code> 文の特殊な文法の殆どがキーワード引数で置き換えられています (<span class="target" id="index-68"></span><a class="pep reference external" href="https://peps.python.org/pep-3105/"><strong>PEP 3105</strong></a>)。 例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="n">Old</span><span class="p">:</span> <span class="nb">print</span> <span class="s2">&quot;The answer is&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="mi">2</span>
<span class="n">New</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;The answer is&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>

<span class="n">Old</span><span class="p">:</span> <span class="nb">print</span> <span class="n">x</span><span class="p">,</span>           <span class="c1"># Trailing comma suppresses newline</span>
<span class="n">New</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">&quot; &quot;</span><span class="p">)</span>  <span class="c1"># Appends a space instead of a newline</span>

<span class="n">Old</span><span class="p">:</span> <span class="nb">print</span>              <span class="c1"># Prints a newline</span>
<span class="n">New</span><span class="p">:</span> <span class="nb">print</span><span class="p">()</span>            <span class="c1"># You must call the function!</span>

<span class="n">Old</span><span class="p">:</span> <span class="nb">print</span> <span class="o">&gt;&gt;</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s2">&quot;fatal error&quot;</span>
<span class="n">New</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;fatal error&quot;</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>

<span class="n">Old</span><span class="p">:</span> <span class="nb">print</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>       <span class="c1"># prints repr((x, y))</span>
<span class="n">New</span><span class="p">:</span> <span class="nb">print</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>      <span class="c1"># Not the same as print(x, y)!</span>
</pre></div>
</div>
<p>項目間の区切りをカスタマイズすることもできます。例:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;There are &lt;&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">32</span><span class="p">,</span> <span class="s2">&quot;&gt; possibilities!&quot;</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</pre></div>
</div>
<p>これは以下を出力します :</p>
<div class="highlight-none notranslate"><div class="highlight"><pre><span></span>There are &lt;4294967296&gt; possibilities!
</pre></div>
</div>
<p>注釈:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a> 関数は、古い <code class="docutils literal notranslate"><span class="pre">print</span></code> 文の &quot;ソフトスペース&quot; 機能をサポートしません。例えば Python 2.x では、 <code class="docutils literal notranslate"><span class="pre">print</span> <span class="pre">&quot;A\n&quot;,</span> <span class="pre">&quot;B&quot;</span></code> は <code class="docutils literal notranslate"><span class="pre">&quot;A\nB\n&quot;</span></code> を出力していましたが、 Python 3.0 では、 <code class="docutils literal notranslate"><span class="pre">print(&quot;A\n&quot;,</span> <span class="pre">&quot;B&quot;)</span></code> は <code class="docutils literal notranslate"><span class="pre">&quot;A\n</span> <span class="pre">B\n&quot;</span></code> を出力します。</p></li>
<li><p>最初は、対話モードで古い <code class="docutils literal notranslate"><span class="pre">print</span> <span class="pre">x</span></code> を何回もタイプしてしまうでしょう。代わりに <code class="docutils literal notranslate"><span class="pre">print(x)</span></code> とタイプするよう再教育してください。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">2to3</span></code> ソース変換ツールを使うと、すべての <code class="docutils literal notranslate"><span class="pre">print</span></code> 文が <a class="reference internal" href="../library/functions.html#print" title="print"><code class="xref py py-func docutils literal notranslate"><span class="pre">print()</span></code></a> 関数呼び出しに自動的に置換されるので、大きなプロジェクトでもさほど問題にならないでしょう。</p></li>
</ul>
</section>
<section id="views-and-iterators-instead-of-lists">
<h3>リストからビューおよびイテレータへ<a class="headerlink" href="#views-and-iterators-instead-of-lists" title="Link to this heading">¶</a></h3>
<p>いくつかの良く使われている API はもはやリストを返しません:</p>
<ul>
<li><p><a class="reference internal" href="../library/stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a> の <a class="reference internal" href="../library/stdtypes.html#dict.keys" title="dict.keys"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.keys()</span></code></a>, <a class="reference internal" href="../library/stdtypes.html#dict.items" title="dict.items"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.items()</span></code></a> そして <a class="reference internal" href="../library/stdtypes.html#dict.values" title="dict.values"><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.values()</span></code></a> メソッドはリストの代わりに &quot;views&quot; を返します。 例えば: <code class="docutils literal notranslate"><span class="pre">k</span> <span class="pre">=</span> <span class="pre">d.keys();</span> <span class="pre">k.sort()</span></code> は上手く動きません。 代わりに <code class="docutils literal notranslate"><span class="pre">k</span> <span class="pre">=</span> <span class="pre">sorted(d)</span></code> を使ってください (これは Python 2.5 でも動作し、効率的です)。</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.iterkeys()</span></code>、 <code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.iteritems()</span></code>、 <code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.itervalues()</span></code> メソッドはもうサポートされません。</p></li>
<li><p><a class="reference internal" href="../library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a> と <a class="reference internal" href="../library/functions.html#filter" title="filter"><code class="xref py py-func docutils literal notranslate"><span class="pre">filter()</span></code></a> はイテレータを返します。もしも本物のリストが必要で、全ての入力シーケンスが同じ長さの場合であれば、簡単に直すなら <a class="reference internal" href="../library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a> を <a class="reference internal" href="../library/stdtypes.html#list" title="list"><code class="xref py py-func docutils literal notranslate"><span class="pre">list()</span></code></a> で包みます。例えば <code class="docutils literal notranslate"><span class="pre">list(map(...))</span></code> という具合。ですがより良いのは、大抵はリスト内包を使うことです (特に元々のコードが <a class="reference internal" href="../reference/expressions.html#lambda"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">lambda</span></code></a> を使っている場合)。あるいはコードを、リストを全く必要としないように書き換えましょう。とりわけトリッキーなのは、関数に副作用を起こさせるために呼び出される <a class="reference internal" href="../library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a> です; この場合確実な変換は普通に <a class="reference internal" href="../reference/compound_stmts.html#for"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">for</span></code></a> ループを使うことです (そもそもリストを作ること自体が無駄遣いでしょう)。</p>
<p>入力シーケンスの長さが同じとは限らないならば、 <a class="reference internal" href="../library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a> は最も短いシーケンスが消費されつくすと処理をやめます。Python 2.x での <a class="reference internal" href="../library/functions.html#map" title="map"><code class="xref py py-func docutils literal notranslate"><span class="pre">map()</span></code></a> 用法と全く互換にするにはシーケンスを <a class="reference internal" href="../library/itertools.html#itertools.zip_longest" title="itertools.zip_longest"><code class="xref py py-func docutils literal notranslate"><span class="pre">itertools.zip_longest()</span></code></a> で包んでください。例えば <code class="docutils literal notranslate"><span class="pre">map(func,</span> <span class="pre">*sequences)</span></code> を <code class="docutils literal notranslate"><span class="pre">list(map(func,</span> <span class="pre">itertools.zip_longest(*sequences)))</span></code> とします。</p>
</li>
<li><p><a class="reference internal" href="../library/stdtypes.html#range" title="range"><code class="xref py py-func docutils literal notranslate"><span class="pre">range()</span></code></a> は <code class="xref py py-func docutils literal notranslate"><span class="pre">xrange()</span></code> のように振る舞います。ただし、任意のサイズの値で動作します。 <code class="xref py py-func docutils literal notranslate"><span class="pre">xrange()</span></code> は削除されました。</p></li>
<li><p><a class="reference internal" href="../library/functions.html#zip" title="zip"><code class="xref py py-func docutils literal notranslate"><span class="pre">zip()</span></code></a> はイテレータを返します。</p></li>
</ul>
</section>
<section id="ordering-comparisons">
<h3>順序比較<a class="headerlink" href="#ordering-comparisons" title="Link to this heading">¶</a></h3>
<p>Python 3.0 で順序比較のルールが簡単になりました。</p>
<ul class="simple">
<li><p>順序比較演算子 (<code class="docutils literal notranslate"><span class="pre">&lt;</span></code>, <code class="docutils literal notranslate"><span class="pre">&lt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">&gt;=</span></code>, <code class="docutils literal notranslate"><span class="pre">&gt;</span></code>)  は、そのオペランドが自然な順序づけを持たない場合 TypeError 例外を送出します。  <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">&lt;</span> <span class="pre">''</span></code>, <code class="docutils literal notranslate"><span class="pre">0</span> <span class="pre">&gt;</span> <span class="pre">None</span></code> または <code class="docutils literal notranslate"><span class="pre">len</span> <span class="pre">&lt;=</span> <span class="pre">len</span></code> のような式は無効になり、 <code class="docutils literal notranslate"><span class="pre">None</span> <span class="pre">&lt;</span> <span class="pre">None</span></code> は <code class="docutils literal notranslate"><span class="pre">False</span></code> を返す代わりに <a class="reference internal" href="../library/exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> を送出します。その結果、 不均一なリスト（訳注：比較不能な型からなる要素が混在するリスト）のソートは意味がなくなりました。 -- 全ての要素は互いに比較できなければなりません。これは <code class="docutils literal notranslate"><span class="pre">==</span></code> と <code class="docutils literal notranslate"><span class="pre">!=</span></code> 演算子には適用されないことに注意してください: 別々の比較不可能な型のオブジェクトを比較すると常に、互いに等しくないと評価されます。</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">builtin.sorted()</span></code> と <a class="reference internal" href="../library/stdtypes.html#list.sort" title="list.sort"><code class="xref py py-meth docutils literal notranslate"><span class="pre">list.sort()</span></code></a> メソッドは比較関数を与える <em>cmp</em> 引数を受け取らなくなりました。 かわりに <em>key</em> 引数を使用してください。 <em>key</em> と <em>reverse</em> 引数は &quot;キーワード専用&quot; となったことに注意してください。</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">cmp()</span></code> 関数は廃止され、 <code class="xref py py-meth docutils literal notranslate"><span class="pre">__cmp__()</span></code> 特殊関数はもはやサポートされません。ソートには <code class="xref py py-meth docutils literal notranslate"><span class="pre">__lt__()</span></code> を使用し、 <code class="xref py py-meth docutils literal notranslate"><span class="pre">__hash__()</span></code> には <code class="xref py py-meth docutils literal notranslate"><span class="pre">__eq__()</span></code>  を 、必要に応じて他の高級比較 (rich comparison) を使用してください。 (もし <code class="xref py py-func docutils literal notranslate"><span class="pre">cmp()</span></code> の機能が必要なら、 式 <code class="docutils literal notranslate"><span class="pre">(a</span> <span class="pre">&gt;</span> <span class="pre">b)</span> <span class="pre">-</span> <span class="pre">(a</span> <span class="pre">&lt;</span> <span class="pre">b)</span></code> を <code class="docutils literal notranslate"><span class="pre">cmp(a,</span> <span class="pre">b)</span></code> の代わに使用できるはずです)</p></li>
</ul>
</section>
<section id="integers">
<h3>整数<a class="headerlink" href="#integers" title="Link to this heading">¶</a></h3>
<ul class="simple">
<li><p><span class="target" id="index-69"></span><a class="pep reference external" href="https://peps.python.org/pep-0237/"><strong>PEP 237</strong></a>: 基本的には、 <code class="xref py py-class docutils literal notranslate"><span class="pre">long</span></code> は <a class="reference internal" href="../library/functions.html#int" title="int"><code class="xref py py-class docutils literal notranslate"><span class="pre">int</span></code></a> に改名されました。これは、整数型の唯一の組み込み型になり、 <a class="reference internal" href="../library/functions.html#int" title="int"><code class="xref py py-class docutils literal notranslate"><span class="pre">int</span></code></a> と名付けられていますが、古い <code class="xref py py-class docutils literal notranslate"><span class="pre">long</span></code> 型とほぼ同じように振る舞います。</p></li>
<li><p><span class="target" id="index-2"></span><a class="pep reference external" href="https://peps.python.org/pep-0238/"><strong>PEP 238</strong></a>: An expression like <code class="docutils literal notranslate"><span class="pre">1/2</span></code> returns a float.  Use
<code class="docutils literal notranslate"><span class="pre">1//2</span></code> to get the truncating behavior.  (The latter syntax has
existed for years, at least since Python 2.2.)</p></li>
<li><p>整数の上限がなくなったため、<code class="xref py py-data docutils literal notranslate"><span class="pre">sys.maxint</span></code> 定数は削除されました。しかしながら、通常のリストや文字列の添え字よりも大きい整数として <a class="reference internal" href="../library/sys.html#sys.maxsize" title="sys.maxsize"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.maxsize</span></code></a> を使うことができます。 <a class="reference internal" href="../library/sys.html#sys.maxsize" title="sys.maxsize"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.maxsize</span></code></a> は実装の &quot;自然な&quot; 整数の大きさに一致し、同じプラットフォームでは (同じビルドオプションなら) 過去のリリースの <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.maxint</span></code> と普通は同じです。</p></li>
<li><p>long 整数の <a class="reference internal" href="../library/functions.html#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> はもはや末尾に <code class="docutils literal notranslate"><span class="pre">L</span></code> を持ちません。そのため、無条件に &quot;L&quot; を取り除くコードは代わりに最後の数字を取り除いてしまうでしょう。 (代わりに <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-func docutils literal notranslate"><span class="pre">str()</span></code></a> を使用してください。)</p></li>
<li><p>8進数リテラルが <code class="docutils literal notranslate"><span class="pre">0720</span></code> の形でなくなりました。代わりに <code class="docutils literal notranslate"><span class="pre">0o720</span></code> を使ってください。</p></li>
</ul>
</section>
<section id="text-vs-data-instead-of-unicode-vs-8-bit">
<h3>Unicode 対 8 ビット、ではなく、テキスト対データに<a class="headerlink" href="#text-vs-data-instead-of-unicode-vs-8-bit" title="Link to this heading">¶</a></h3>
<p>バイナリと Unicode について知っていると思っている全てが変わりました。</p>
<ul class="simple">
<li><p>Python 3.0 でのコンセプトは、Unicode 文字列と 8 ビット文字列、という対比ではなくて、 <em>テキスト</em> と (バイナリ) <em>データ</em> の違いと考える、というものです。全てのテキストは Unicode です; 一方で <em>エンコードされた</em> Unicode はバイナリデータとして表現されます。テキストを保持するのに使われる型は <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> で、データには <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> を使います。2.x での状況との最大の違いは、Python 3.0 でテキストとデータを混ぜようとすれば <a class="reference internal" href="../library/exceptions.html#TypeError" title="TypeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">TypeError</span></code></a> となることです。Python 2.x では Unicode と 8 ビット文字列を混ぜたとすれば、8 ビット文字列がたまたま 7 ビット (ASCII) バイトだけから出来ていれば動くし非 ASCII バイトがあれば <a class="reference internal" href="../library/exceptions.html#UnicodeDecodeError" title="UnicodeDecodeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UnicodeDecodeError</span></code></a> となっていたでしょう。この、データ値に依存した振る舞いが、何年にも渡って夥しい数の悲劇を生み出していました。</p></li>
<li><p>この変更からの帰結として、Unicode、エンコーディング、あるいはバイナリデータを使うほとんど全てのコードは、原則として修正する必要があると思います。この変更は進歩のための破壊です。というのも 2.x 世界には、エンコードされたテキストとそうでないものをごっちゃにしている膨大な数のバグがあるはずだからです。Python 2.x のうちから準備しておくには、まずは全てのエンコードしていないテキストに <code class="xref py py-class docutils literal notranslate"><span class="pre">unicode</span></code> を使い、 <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> はバイナリとエンコードされたデータだけに対して使うことから始めてください。そうしておけば <code class="docutils literal notranslate"><span class="pre">2to3</span></code> ツールがあなたのためにほとんどの仕事をしてくれるでしょう。</p></li>
<li><p>Unicode テキストのリテラルに <code class="docutils literal notranslate"><span class="pre">u&quot;...&quot;</span></code> を使うことはもはやできません。しかし、バイナリーデータのリテラルには <code class="docutils literal notranslate"><span class="pre">b&quot;...&quot;</span></code> を使わなければなりません。(---訳注: この <code class="docutils literal notranslate"><span class="pre">u&quot;...&quot;</span></code> は Python 3.3 で再び使えるようになりました。 ---)</p></li>
<li><p><a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 型と <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 型を混ぜて使うことは出来ませんから、それらはいつでも明示的に変換しなければいけません。 <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> から <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> にするには <a class="reference internal" href="../library/stdtypes.html#str.encode" title="str.encode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">str.encode()</span></code></a> を使ってください。そして <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> から <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> にするには <a class="reference internal" href="../library/stdtypes.html#bytes.decode" title="bytes.decode"><code class="xref py py-meth docutils literal notranslate"><span class="pre">bytes.decode()</span></code></a> を使います。それぞれ <code class="docutils literal notranslate"><span class="pre">bytes(s,</span> <span class="pre">encoding=...)</span></code> 、 <code class="docutils literal notranslate"><span class="pre">str(b,</span> <span class="pre">encoding=...)</span></code> を使うことも出来ます。</p></li>
<li><p><a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> がそうであるように、 <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> は <a class="reference internal" href="../glossary.html#term-immutable"><span class="xref std std-term">immutable</span></a> です。これとは独立させて <a class="reference internal" href="../glossary.html#term-mutable"><span class="xref std std-term">mutable</span></a> 型として、バッファ化されたバイナリデータを保持するための <a class="reference internal" href="../library/stdtypes.html#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> が用意してあります。 <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> を受け付ける API のほぼ全てが <a class="reference internal" href="../library/stdtypes.html#bytearray" title="bytearray"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytearray</span></code></a> も許容します。その mutable API は <code class="xref py py-class docutils literal notranslate"><span class="pre">collections.MutableSequence</span></code> に基づいています。</p></li>
<li><p>raw 文字列リテラル内にある全てのバックスラッシュが「字句通り」に解釈されます。つまり <code class="docutils literal notranslate"><span class="pre">'\U'</span></code> も <code class="docutils literal notranslate"><span class="pre">'\u'</span></code> も、 raw 文字列内にあっては何ら特別に扱われないということです。例えば <code class="docutils literal notranslate"><span class="pre">r'\u20ac'</span></code> は Python 3.0 では 6 文字の文字列です。Python 2.x では <code class="docutils literal notranslate"><span class="pre">ur'\u20ac'</span></code> が単一の「ユーロ」文字であったのにです。(無論この変更は raw 文字列リテラルについてだけのもので、ユーロ文字は Python 3.0 で <code class="docutils literal notranslate"><span class="pre">'\u20ac'</span></code> です。)</p></li>
<li><p>組み込みであった <code class="xref py py-class docutils literal notranslate"><span class="pre">basestring</span></code> 抽象型なんてものは削除されたのです。 <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> をお使いなさい。 <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> と <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> は基底クラスを共有するのを正当化するのに足るほどには、機能的に共通していないのです。 <code class="docutils literal notranslate"><span class="pre">2to3</span></code> ツール (後述) は <code class="xref py py-class docutils literal notranslate"><span class="pre">basestring</span></code> を片っ端から <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> に置き換えてくれます。</p></li>
<li><p>テキストファイルとして開かれたファイル (これは従来どおり <a class="reference internal" href="../library/functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> でのデフォルトのモード) は、 (メモリ内の) 文字列と (ディスクでの) バイト列との写像をするのに、常にエンコーディングを使います。バイナリファイル (モードに <code class="docutils literal notranslate"><span class="pre">b</span></code> を付けて開いたもの) はメモリ内では常にバイト列を使います。このことで、もしもファイルが誤ったモードやエンコーディングで開かれようとすると、I/O はきっと口やかましく失敗します。こっそり正しくないデータを生み出すのではなく。それに加えて、ファイルを開く際には Unix ユーザでさえもこれからは、 (テキストかバイナリかの) 正しいモードを選択する必要があるということです。プラットフォームにはそれ特有のデフォルトエンコーディングがあります。Unix 的プラットフォームではこれは環境変数 <code class="docutils literal notranslate"><span class="pre">LANG</span></code> にセットされているかもしれません (あるいは時々ほかのプラットフォーム特有の、ロケールに関係した環境変数にもセットされています)。全てとは言いませんが多くの場合は、システムのデフォルトは UTF-8 です; ですが決してこのデフォルトを当てにすべきではありません。純粋な ASCII テキスト以上のものを読み書きするどんなアプリケーションも、きっとエンコーディングをオーバライド出来る手段を持つべきです。 <a class="reference internal" href="../library/codecs.html#module-codecs" title="codecs: Encode and decode data and streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">codecs</span></code></a> 内にあるエンコーディングを熟知したストリームを使うことは、今ではもう必要なくなりました。</p></li>
<li><p><a class="reference internal" href="../library/sys.html#sys.stdin" title="sys.stdin"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdin</span></code></a>, <a class="reference internal" href="../library/sys.html#sys.stdout" title="sys.stdout"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdout</span></code></a>, <a class="reference internal" href="../library/sys.html#sys.stderr" title="sys.stderr"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stderr</span></code></a> の初期値はいまでは Unicode のみのテキストファイルです (つまりそれらは <a class="reference internal" href="../library/io.html#io.TextIOBase" title="io.TextIOBase"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.TextIOBase</span></code></a> のインスタンスです)。バイト列データをそれらのストリームで読み書きするには、 <a class="reference internal" href="../library/io.html#io.TextIOBase.buffer" title="io.TextIOBase.buffer"><code class="xref py py-data docutils literal notranslate"><span class="pre">io.TextIOBase.buffer</span></code></a> 属性を使う必要があります。</p></li>
<li><p>ファイル名は、API へは (Unicode) 文字列を渡し、 (Unicode) 文字列が返ります。これにはプラットフォーム特有の問題があるかもしれません。というのも、いくつかのプラットフォームではファイル名は任意のバイト文字列だからです。(他方では、Windows ではファイル名はネイティブに Unicode で格納されています。) 次善策として、ほとんどの API (たとえば <a class="reference internal" href="../library/functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> と <a class="reference internal" href="../library/os.html#module-os" title="os: Miscellaneous operating system interfaces."><code class="xref py py-mod docutils literal notranslate"><span class="pre">os</span></code></a> モジュール内の多くの関数) はファイル名として、文字列だけでなく <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> を受け付け、そして少しの API は <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> を返すかどうかを要求出来る手段を持っています。それゆえに <a class="reference internal" href="../library/os.html#os.listdir" title="os.listdir"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.listdir()</span></code></a> は引数が <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> インスタンスであれば <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> のリストで返し、 <a class="reference internal" href="../library/os.html#os.getcwdb" title="os.getcwdb"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.getcwdb()</span></code></a> はカレントディレクトリを <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> で返します。 <a class="reference internal" href="../library/os.html#os.listdir" title="os.listdir"><code class="xref py py-func docutils literal notranslate"><span class="pre">os.listdir()</span></code></a> が文字列のリストで返す際、適切にデコード出来ないファイル名は <a class="reference internal" href="../library/exceptions.html#UnicodeError" title="UnicodeError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">UnicodeError</span></code></a> とはせずに無視されることにご注意ください。</p></li>
<li><p><a class="reference internal" href="../library/os.html#os.environ" title="os.environ"><code class="xref py py-data docutils literal notranslate"><span class="pre">os.environ</span></code></a> や <a class="reference internal" href="../library/sys.html#sys.argv" title="sys.argv"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.argv</span></code></a> のようないくつかのシステム API にも問題がありえます。システムにより利用可能とされるべきバイト列がデフォルトエンコーディングで解釈不能な場合です。環境変数 <code class="docutils literal notranslate"><span class="pre">LANG</span></code> をセットしてプログラムを再実行することが、おそらく最善のアプローチです。</p></li>
<li><p><span class="target" id="index-71"></span><a class="pep reference external" href="https://peps.python.org/pep-3138/"><strong>PEP 3138</strong></a>: 文字列への <a class="reference internal" href="../library/functions.html#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> はもう非 ASCII 文字をエスケープしません。ただし、制御文字、Unicode 標準で印字不可状態のコードポイントは今でもエスケープされます。</p></li>
<li><p><span class="target" id="index-72"></span><a class="pep reference external" href="https://peps.python.org/pep-3120/"><strong>PEP 3120</strong></a>: ソースのエンコードのデフォルトが UTF-8 になりました。</p></li>
<li><p><span class="target" id="index-73"></span><a class="pep reference external" href="https://peps.python.org/pep-3131/"><strong>PEP 3131</strong></a>: 非 ASCII 文字を識別子として使用することが出来るようになりました。 (そうはいっても標準ライブラリは、コメント内での貢献者の名前以外では ASCII だけのままです。)</p></li>
<li><p><code class="xref py py-mod docutils literal notranslate"><span class="pre">StringIO</span></code> および <code class="xref py py-mod docutils literal notranslate"><span class="pre">cStringIO</span></code> モジュールは廃止されました。その代わり <a class="reference internal" href="../library/io.html#module-io" title="io: Core tools for working with streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">io</span></code></a> モジュールをインポートして、テキストやデータには <a class="reference internal" href="../library/io.html#io.StringIO" title="io.StringIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.StringIO</span></code></a> や <a class="reference internal" href="../library/io.html#io.BytesIO" title="io.BytesIO"><code class="xref py py-class docutils literal notranslate"><span class="pre">io.BytesIO</span></code></a> を使用してください。</p></li>
<li><p><a class="reference internal" href="../howto/unicode.html#unicode-howto"><span class="std std-ref">Unicode HOWTO</span></a> を参照してください。Python 3.0 向けに更新されました。</p></li>
</ul>
</section>
</section>
<section id="overview-of-syntax-changes">
<h2>構文の変更の概要<a class="headerlink" href="#overview-of-syntax-changes" title="Link to this heading">¶</a></h2>
<p>このセクションは Python 3.0 における全ての <em>構文の</em> 変更についての簡単な概要です。</p>
<section id="new-syntax">
<h3>新たな構文<a class="headerlink" href="#new-syntax" title="Link to this heading">¶</a></h3>
<ul>
<li><p><span class="target" id="index-74"></span><a class="pep reference external" href="https://peps.python.org/pep-3107/"><strong>PEP 3107</strong></a>: 関数引数と戻り値のアノテーション。これは関数のパラメータと戻り値へのアノテーションを付ける標準的な手段を提供します (訳注: annotation を強いて訳せば「注釈」)。そのようなアノテーションには、実行時に <code class="xref py py-attr docutils literal notranslate"><span class="pre">__annotations__</span></code> 属性を調べること以外には何の意味付けもされていません。メタクラスやデコレータ、フレームワークを通じた実験を促進することが意図されています。</p></li>
<li><p><span class="target" id="index-75"></span><a class="pep reference external" href="https://peps.python.org/pep-3102/"><strong>PEP 3102</strong></a>: キーワード専用引数。
パラメータリスト中で <code class="docutils literal notranslate"><span class="pre">*args</span></code> のあとに現れる名前付きパラメータは、呼び出す際には <em>必ず</em> キーワード引数の構文を使う必要があります (---訳注: <code class="docutils literal notranslate"><span class="pre">def</span> <span class="pre">fun(*a,</span> <span class="pre">kw):</span></code> という定義で <code class="docutils literal notranslate"><span class="pre">fun(1,</span> <span class="pre">2,</span> <span class="pre">3)</span></code> は NG で <code class="docutils literal notranslate"><span class="pre">fun(1,</span> <span class="pre">2,</span> <span class="pre">kw=3)</span></code> としなければならない。ここまでは 2.x と同じ ---)。
この PEP により、可変引数リストを受け取らずにキーワード専用引数だけを許したい場合にそれを主張するために剥き出しの <code class="docutils literal notranslate"><span class="pre">*</span></code> をパラメータリスト内に書けるようになりました (---訳注: <code class="docutils literal notranslate"><span class="pre">def</span> <span class="pre">fun(*,</span> <span class="pre">kw):</span></code> と定義出来る。この定義では <code class="docutils literal notranslate"><span class="pre">fun(kw=1)</span></code> としてしか呼び出せない。 <code class="docutils literal notranslate"><span class="pre">fun(1)</span></code> はダメ。---)。</p></li>
<li><p>クラス定義内で、基底クラスのリストのあとでキーワード引数が許されるようになりました。これは metaclass を指定するための新しい規約 (次セクション参照) に使われるものですが、 metaclass サポートだけのためだけでなく他の目的に使うことも出来ます。</p></li>
<li><p><span class="target" id="index-76"></span><a class="pep reference external" href="https://peps.python.org/pep-3104/"><strong>PEP 3104</strong></a>: <a class="reference internal" href="../reference/simple_stmts.html#nonlocal"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">nonlocal</span></code></a> 文。 <code class="docutils literal notranslate"><span class="pre">nonlocal</span> <span class="pre">x</span></code> を使うと外側の (ただしグローバルでない) スコープから、直接変数を代入することが出来るようになります。 <code class="xref std std-keyword docutils literal notranslate"><span class="pre">nonlocal</span></code> は新しく予約語になりました。</p></li>
<li><p><span class="target" id="index-77"></span><a class="pep reference external" href="https://peps.python.org/pep-3132/"><strong>PEP 3132</strong></a>: 拡張されたイテレータのアンパック。 <code class="docutils literal notranslate"><span class="pre">a,</span> <span class="pre">b,</span> <span class="pre">*rest</span> <span class="pre">=</span> <span class="pre">some_sequence</span></code> のようなことを書けるようになりました。 <code class="docutils literal notranslate"><span class="pre">*rest,</span> <span class="pre">a</span> <span class="pre">=</span> <span class="pre">stuff</span></code> も出来ます。 <code class="docutils literal notranslate"><span class="pre">rest</span></code> オブジェクトは常に (空かもしれなくても) リストです; 右辺には任意のイテラブルを置けます。例えば:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</pre></div>
</div>
<p>これは <em>a</em> に <code class="docutils literal notranslate"><span class="pre">0</span></code> を、 <em>b</em> に <code class="docutils literal notranslate"><span class="pre">4</span></code> を、そして <em>rest</em> に <code class="docutils literal notranslate"><span class="pre">[1,</span> <span class="pre">2,</span> <span class="pre">3]</span></code> をセットします。</p>
</li>
<li><p>辞書内包表記: <code class="docutils literal notranslate"><span class="pre">{k:</span> <span class="pre">v</span> <span class="pre">for</span> <span class="pre">k,</span> <span class="pre">v</span> <span class="pre">in</span> <span class="pre">stuff}</span></code> は <code class="docutils literal notranslate"><span class="pre">dict(stuff)</span></code> と同じ意味ですが、より柔軟です。 (これは <span class="target" id="index-78"></span><a class="pep reference external" href="https://peps.python.org/pep-0274/"><strong>PEP 274</strong></a> で支持されています。)</p></li>
<li><p>セットリテラル、例えば <code class="docutils literal notranslate"><span class="pre">{1,</span> <span class="pre">2}</span></code>。<code class="docutils literal notranslate"><span class="pre">{}</span></code> は空の辞書であることに注意してください。空のセットには <code class="docutils literal notranslate"><span class="pre">set()</span></code> を使用してください。セットの内包表記もサポートされました。例えば <code class="docutils literal notranslate"><span class="pre">{x</span> <span class="pre">for</span> <span class="pre">x</span> <span class="pre">in</span> <span class="pre">stuff}</span></code> は <code class="docutils literal notranslate"><span class="pre">set(stuff)</span></code> と同じ意味ですが、より柔軟です。</p></li>
<li><p>新たな8進数リテラル、e.g. <code class="docutils literal notranslate"><span class="pre">0o720</span></code> (2.6 で既にありました)。古い8進数リテラル (<code class="docutils literal notranslate"><span class="pre">0720</span></code>) は廃止されました。</p></li>
<li><p>新たなバイナリリテラル、e.g. <code class="docutils literal notranslate"><span class="pre">0b1010</span></code> (2.6 で既にありました) と、関連する新しい組み込み関数 <a class="reference internal" href="../library/functions.html#bin" title="bin"><code class="xref py py-func docutils literal notranslate"><span class="pre">bin()</span></code></a> が導入されました。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">b</span></code> または <code class="docutils literal notranslate"><span class="pre">B</span></code> で始まるバイトリテラルと、関連する新しい組み込み関数 <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-func docutils literal notranslate"><span class="pre">bytes()</span></code></a> が導入されました。</p></li>
</ul>
</section>
<section id="changed-syntax">
<h3>変更された構文<a class="headerlink" href="#changed-syntax" title="Link to this heading">¶</a></h3>
<ul>
<li><p><span class="target" id="index-79"></span><a class="pep reference external" href="https://peps.python.org/pep-3109/"><strong>PEP 3109</strong></a> と <span class="target" id="index-80"></span><a class="pep reference external" href="https://peps.python.org/pep-3134/"><strong>PEP 3134</strong></a>: 新たな <a class="reference internal" href="../reference/simple_stmts.html#raise"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">raise</span></code></a> 文のシンタックス: <code class="samp docutils literal notranslate"><span class="pre">raise</span> <span class="pre">[</span><em><span class="pre">expr</span></em> <span class="pre">[from</span> <em><span class="pre">expr</span></em><span class="pre">]]</span></code>。以下を参照してください。</p></li>
<li><p><code class="xref std std-keyword docutils literal notranslate"><span class="pre">as</span></code> と <a class="reference internal" href="../reference/compound_stmts.html#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> は予約語になりました。 (実際には 2.6 から)</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">True</span></code>、<code class="docutils literal notranslate"><span class="pre">False</span></code>、および <code class="docutils literal notranslate"><span class="pre">None</span></code> が予約語になりました。(2.6 では既に <code class="docutils literal notranslate"><span class="pre">None</span></code> が部分的に制限されていました)</p></li>
<li><p>Change from <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> <em>exc</em>, <em>var</em> to
<code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code> <em>exc</em> <code class="xref std std-keyword docutils literal notranslate"><span class="pre">as</span></code> <em>var</em>.  See <span class="target" id="index-13"></span><a class="pep reference external" href="https://peps.python.org/pep-3110/"><strong>PEP 3110</strong></a>.</p></li>
<li><p><span class="target" id="index-81"></span><a class="pep reference external" href="https://peps.python.org/pep-3115/"><strong>PEP 3115</strong></a>: 新たなメタクラスのシンタックス．以下の;</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">M</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>代わりに次のようにしてください:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">C</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">M</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>モジュールグローバルの <code class="xref py py-data docutils literal notranslate"><span class="pre">__metaclass__</span></code> 変数はもうサポートされません。(これは <a class="reference internal" href="../library/functions.html#object" title="object"><code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></a> を派生しない全てのクラスのデフォルトを簡単に新スタイルクラス化するための「松葉杖」でした。) (---訳注: 「新/旧スタイルクラス」は Python 2.x 固有の概念。Python 2.1 までの旧式クラスと、Python 2.2 で導入された、現在まで続く <a class="reference internal" href="../library/functions.html#object" title="object"><code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></a> を派生する (当時の旧からみた) 新スタイル。Python 2.2 から 2.7 では <code class="docutils literal notranslate"><span class="pre">class</span> <span class="pre">Clazz:</span></code> は (モジュールグローバルの <code class="xref py py-data docutils literal notranslate"><span class="pre">__metaclass__</span></code> を使わない限り) <a class="reference internal" href="../library/functions.html#object" title="object"><code class="xref py py-class docutils literal notranslate"><span class="pre">object</span></code></a> を派生しない旧スタイルクラスでしたが、Python 3.x にはもはや「旧スタイルクラス」がないのでこれは Python 2.2 から 2.7 での <code class="docutils literal notranslate"><span class="pre">class</span> <span class="pre">Clazz(object):</span></code> と同じ意味です。---)</p>
</li>
<li><p>リスト内包表記はもう <code class="samp docutils literal notranslate"><span class="pre">[...</span> <span class="pre">for</span> <em><span class="pre">var</span></em> <span class="pre">in</span> <em><span class="pre">item1</span></em><span class="pre">,</span> <em><span class="pre">item2</span></em><span class="pre">,</span> <span class="pre">...]</span></code> という構文形をサポートしません。代わりに <code class="samp docutils literal notranslate"><span class="pre">[...</span> <span class="pre">for</span> <em><span class="pre">var</span></em> <span class="pre">in</span> <span class="pre">(</span><em><span class="pre">item1</span></em><span class="pre">,</span> <em><span class="pre">item2</span></em><span class="pre">,</span> <span class="pre">...)]</span></code> を使用してください。また、リスト内包表記は異なるセマンティクスを持つことに注意してください。リスト内包表記は <a class="reference internal" href="../library/stdtypes.html#list" title="list"><code class="xref py py-func docutils literal notranslate"><span class="pre">list()</span></code></a> コンストラクタ内のジェネレータ式の糖衣構文に近く、特にループの制御変数はスコープ外ではもう使用することができません。</p></li>
<li><p><em>ellipsis</em> (<code class="docutils literal notranslate"><span class="pre">...</span></code>) はどこででも原子的な式として使うことが出来ます。
(以前はスライス内でのみ許されていました。)
また、<code class="docutils literal notranslate"><span class="pre">...</span></code> と書かなければ <em>ならなく</em> なりました。
(以前は文法の些細な偶然により <code class="docutils literal notranslate"><span class="pre">.</span> <span class="pre">.</span> <span class="pre">.</span></code> と書くことも出来ました。)</p></li>
</ul>
</section>
<section id="removed-syntax">
<h3>削除された操作<a class="headerlink" href="#removed-syntax" title="Link to this heading">¶</a></h3>
<ul class="simple">
<li><p><span class="target" id="index-82"></span><a class="pep reference external" href="https://peps.python.org/pep-3113/"><strong>PEP 3113</strong></a>: タプル引数のアンパックが削除されました.  <code class="docutils literal notranslate"><span class="pre">def</span> <span class="pre">foo(a,</span> <span class="pre">(b,</span> <span class="pre">c)):</span> <span class="pre">...</span></code> のように書くことはできません。かわりに <code class="docutils literal notranslate"><span class="pre">def</span> <span class="pre">foo(a,</span> <span class="pre">b_c):</span> <span class="pre">b,</span> <span class="pre">c</span> <span class="pre">=</span> <span class="pre">b_c</span></code> を使用してください。</p></li>
<li><p>バッククオートが削除されました (代わりに <a class="reference internal" href="../library/functions.html#repr" title="repr"><code class="xref py py-func docutils literal notranslate"><span class="pre">repr()</span></code></a> を使用してください)。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">&lt;&gt;</span></code> が削除されました (代わりに <code class="docutils literal notranslate"><span class="pre">!=</span></code> を使用してください)。</p></li>
<li><p>削除されたキーワード: <a class="reference internal" href="../library/functions.html#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a> はキーワードでなくなりましたが、関数として残りました。 (幸運にも関数のシンタックスは 2.x でも許容されています。)  また、 <a class="reference internal" href="../library/functions.html#exec" title="exec"><code class="xref py py-func docutils literal notranslate"><span class="pre">exec()</span></code></a> はストリーム引数を受け取らなくなりました。<code class="docutils literal notranslate"><span class="pre">exec(f)</span></code> の代わりに <code class="docutils literal notranslate"><span class="pre">exec(f.read())</span></code> を使うことができます。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">l</span></code> または <code class="docutils literal notranslate"><span class="pre">L</span></code> で終わる整数リテラルはサポートされません。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">u</span></code> or <code class="docutils literal notranslate"><span class="pre">U</span></code> で始まる文字列リテラルはサポートされません。(---訳注: この <code class="docutils literal notranslate"><span class="pre">u&quot;...&quot;</span></code> は Python 3.3 で再び使えるようになりました。 ---)</p></li>
<li><p><a class="reference internal" href="../reference/simple_stmts.html#from"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">from</span></code></a> <em>module</em> <a class="reference internal" href="../reference/simple_stmts.html#import"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">import</span></code></a> <code class="docutils literal notranslate"><span class="pre">*</span></code> はモジュールレベルでのみ許され、関数内での使用は許されません。</p></li>
<li><p>相対インポートに許される構文は <code class="samp docutils literal notranslate"><span class="pre">from</span> <span class="pre">.[</span><em><span class="pre">module</span></em><span class="pre">]</span> <span class="pre">import</span> <em><span class="pre">name</span></em></code> のみです。
<code class="docutils literal notranslate"><span class="pre">.</span></code> で始まらない形の全ての <a class="reference internal" href="../reference/simple_stmts.html#import"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">import</span></code></a> は絶対インポートと解釈されます。 (<span class="target" id="index-83"></span><a class="pep reference external" href="https://peps.python.org/pep-0328/"><strong>PEP 328</strong></a>)</p></li>
<li><p>古い形式のクラスはサポートされません。</p></li>
</ul>
</section>
</section>
<section id="changes-already-present-in-python-2-6">
<h2>Python 2.6 で既にあった変更<a class="headerlink" href="#changes-already-present-in-python-2-6" title="Link to this heading">¶</a></h2>
<p>おそらく多くのユーザが一足飛びに Python 2.5 から Python 3.0 に移行しようとするでしょうから、このセクションでは、もともとは Python 3.0 のためにデザインされたものの Python 2.6 にバックポートされた新機能について、読者に思い出してもらいましょう。 <a class="reference internal" href="2.6.html#whats-new-in-2-6"><span class="std std-ref">What's New in Python 2.6</span></a> 内の対応するセクションにはもっと長い説明が書かれています。</p>
<ul class="simple">
<li><p><a class="reference internal" href="2.6.html#pep-0343"><span class="std std-ref">PEP 343: &quot;with&quot; ステートメント</span></a>. <a class="reference internal" href="../reference/compound_stmts.html#with"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">with</span></code></a> 文は今では標準機能となったので、 <a class="reference internal" href="../library/__future__.html#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> からインポートする必要はもうありません。 <a class="reference internal" href="2.6.html#new-26-context-managers"><span class="std std-ref">コンテキストマネージャを書く</span></a> と <a class="reference internal" href="2.6.html#new-module-contextlib"><span class="std std-ref">contextlib モジュール</span></a> も見てください。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-0366"><span class="std std-ref">PEP 366: メインモジュールからの明示的相対インポート</span></a>. <a class="reference internal" href="../using/cmdline.html#cmdoption-m"><code class="xref std std-option docutils literal notranslate"><span class="pre">-m</span></code></a> オプションの有用性を強化します。パッケージ内にあるモジュールを参照している際に関係します。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-0370"><span class="std std-ref">PEP 370: ユーザごとの site-packages ディレクトリ</span></a>.</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-0371"><span class="std std-ref">PEP 371: multiprocessing パッケージ</span></a>.</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3101"><span class="std std-ref">PEP 3101: 進化版文字列フォーマッティング</span></a>. 注意: 2.6 の記述では <a class="reference internal" href="../library/functions.html#format" title="format"><code class="xref py py-meth docutils literal notranslate"><span class="pre">format()</span></code></a> メソッドが 8 ビット文字列と Unicode 文字列両方について述べていますが、3.0 では <a class="reference internal" href="../library/stdtypes.html#str" title="str"><code class="xref py py-class docutils literal notranslate"><span class="pre">str</span></code></a> 型 (Unicode サポートを持ったテキスト文字列) だけがこのメソッドをサポートしています。 <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 型にはありません。計画では最終的にはこれだけが唯一の文字列フォーマットの API になり、Python 3.1 では <code class="docutils literal notranslate"><span class="pre">%</span></code> 演算子は非推奨扱いを開始する予定です。(--- 訳注: <code class="docutils literal notranslate"><span class="pre">%</span></code> 演算子の撤廃は影響が大き過ぎるからか、現実には (ドキュメントでの軽い記述を除き) 実行時に特別に非推奨扱いされることは 3.5 になってさえもいまだありません。 ---)</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3105"><span class="std std-ref">PEP 3105: print を関数にする</span></a>. これはもはや標準機能となったので、 <a class="reference internal" href="../library/__future__.html#module-__future__" title="__future__: Future statement definitions"><code class="xref py py-mod docutils literal notranslate"><span class="pre">__future__</span></code></a> からインポートする必要はありません。詳細はこのドキュメントの上の方に書いてあります。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3110"><span class="std std-ref">PEP 3110: 例外処理の変更</span></a>.  The <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> <em>exc</em> <code class="xref std std-keyword docutils literal notranslate"><span class="pre">as</span></code> <em>var</em>
syntax is now standard and <code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code> <em>exc</em>, <em>var</em> is no
longer supported.  (Of course, the <code class="xref std std-keyword docutils literal notranslate"><span class="pre">as</span></code> <em>var</em> part is still
optional.)</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3112"><span class="std std-ref">PEP 3112: バイトリテラル</span></a>. 文字列リテラル <code class="docutils literal notranslate"><span class="pre">b&quot;...&quot;</span></code> 表記 (とそのお仲間 <code class="docutils literal notranslate"><span class="pre">b'...'</span></code>, <code class="docutils literal notranslate"><span class="pre">b&quot;&quot;&quot;...&quot;&quot;&quot;</span></code>, <code class="docutils literal notranslate"><span class="pre">br&quot;...&quot;</span></code> など) は今では <a class="reference internal" href="../library/stdtypes.html#bytes" title="bytes"><code class="xref py py-class docutils literal notranslate"><span class="pre">bytes</span></code></a> 型です。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3116"><span class="std std-ref">PEP 3116: 新しい I/O ライブラリ</span></a>. <a class="reference internal" href="../library/io.html#module-io" title="io: Core tools for working with streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">io</span></code></a> モジュールが今ではファイル I/O の標準手段です。組み込みの <a class="reference internal" href="../library/functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a> は今では <a class="reference internal" href="../library/io.html#io.open" title="io.open"><code class="xref py py-func docutils literal notranslate"><span class="pre">io.open()</span></code></a> へのエイリアスであり、また、追加のキーワード引数 <em>encoding</em>, <em>errors</em>, <em>newline</em>, <em>closefd</em> を持ちます。不正な <em>mode</em> 引数で <a class="reference internal" href="../library/exceptions.html#IOError" title="IOError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">IOError</span></code></a> ではなく <a class="reference internal" href="../library/exceptions.html#ValueError" title="ValueError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">ValueError</span></code></a> を投げるようになったことにも注意してください。テキストファイルオブジェクトの背後にあるバイナリファイルオブジェクトには、 <code class="xref py py-attr docutils literal notranslate"><span class="pre">f.buffer</span></code> でアクセスできます。(ただしエンコーディング・デコーディング操作の高速化のために、テキストオブジェクトは自身のバッファを保守管理していることに注意してください。)</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3118"><span class="std std-ref">PEP 3118: 改訂版バッファプロトコル</span></a>. 古いビルトインの <code class="xref py py-func docutils literal notranslate"><span class="pre">buffer()</span></code> は本当になくなりました; 新しいビルトイン <a class="reference internal" href="../library/stdtypes.html#memoryview" title="memoryview"><code class="xref py py-func docutils literal notranslate"><span class="pre">memoryview()</span></code></a> が (ほぼ) 同様の機能性を提供します。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3119"><span class="std std-ref">PEP 3119: 抽象基底クラス</span></a>. <a class="reference internal" href="../library/collections.html#module-collections" title="collections: Container datatypes"><code class="xref py py-mod docutils literal notranslate"><span class="pre">collections</span></code></a> モジュール内で定義されている <a class="reference internal" href="../library/abc.html#module-abc" title="abc: Abstract base classes according to :pep:`3119`."><code class="xref py py-mod docutils literal notranslate"><span class="pre">abc</span></code></a> モジュールと ABC 群が今では言語においてもっと目立った役割を演じるようになっていて、たとえば <a class="reference internal" href="../library/stdtypes.html#dict" title="dict"><code class="xref py py-class docutils literal notranslate"><span class="pre">dict</span></code></a> や <a class="reference internal" href="../library/stdtypes.html#list" title="list"><code class="xref py py-class docutils literal notranslate"><span class="pre">list</span></code></a> のようなビルトインのコレクション型はそれぞれ <code class="xref py py-class docutils literal notranslate"><span class="pre">collections.MutableMapping</span></code> と <code class="xref py py-class docutils literal notranslate"><span class="pre">collections.MutableSequence</span></code> の ABC に従うようになっています。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3127"><span class="std std-ref">PEP 3127: 整数リテラルのサポートと文法</span></a>. 上述のとおり、新しい 8 進数リテラル表現だけが唯一の 8 進数リテラル表現となり、また、バイナリリテラルが追加されました。</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3129"><span class="std std-ref">PEP 3129: クラスデコレータ</span></a>.</p></li>
<li><p><a class="reference internal" href="2.6.html#pep-3141"><span class="std std-ref">PEP 3141: 数値の型階層</span></a>. <a class="reference internal" href="../library/numbers.html#module-numbers" title="numbers: Numeric abstract base classes (Complex, Real, Integral, etc.)."><code class="xref py py-mod docutils literal notranslate"><span class="pre">numbers</span></code></a> が、もう一つの新しく ABC を使うモジュールで、Python の「数値塔 (numeric tower)」を定義しています。新しい <a class="reference internal" href="../library/fractions.html#module-fractions" title="fractions: Rational numbers."><code class="xref py py-mod docutils literal notranslate"><span class="pre">fractions</span></code></a> モジュールが <a class="reference internal" href="../library/numbers.html#numbers.Rational" title="numbers.Rational"><code class="xref py py-class docutils literal notranslate"><span class="pre">numbers.Rational</span></code></a> を実装していることにも注目してください。</p></li>
</ul>
</section>
<section id="library-changes">
<h2>ライブラリの変更<a class="headerlink" href="#library-changes" title="Link to this heading">¶</a></h2>
<p>時間の制約により、この文書は標準ライブラリの非常に幅広い変更について徹底的に取り上げてはいません。
ライブラリの大きな変更については <span class="target" id="index-84"></span><a class="pep reference external" href="https://peps.python.org/pep-3108/"><strong>PEP 3108</strong></a> を参照してください。
ここでは要約を示します:</p>
<ul>
<li><p>多くの古いモジュールは削除されました。
<code class="xref py py-mod docutils literal notranslate"><span class="pre">gopherlib</span></code> (もう使われません) や <code class="xref py py-mod docutils literal notranslate"><span class="pre">md5</span></code> (<a class="reference internal" href="../library/hashlib.html#module-hashlib" title="hashlib: Secure hash and message digest algorithms."><code class="xref py py-mod docutils literal notranslate"><span class="pre">hashlib</span></code></a> に代替されました) 等のいくつかのモジュールは <span class="target" id="index-85"></span><a class="pep reference external" href="https://peps.python.org/pep-0004/"><strong>PEP 4</strong></a> で既に廃止予定でした。
他のモジュールは、Irix、BeOS ならびに Mac OS 9 等のプラットフォームでのサポートが打ち切られた (<span class="target" id="index-86"></span><a class="pep reference external" href="https://peps.python.org/pep-0011/"><strong>PEP 11</strong></a> 参照) ために削除されました。
いくつかのモジュールは使われなかったり、より良い代用品があるため Python 3.0 で削除されました
網羅的なリストは <span class="target" id="index-87"></span><a class="pep reference external" href="https://peps.python.org/pep-3108/"><strong>PEP 3108</strong></a> を参照してください。</p></li>
<li><p>The <code class="xref py py-mod docutils literal notranslate"><span class="pre">bsddb3</span></code> package was removed because its presence in the
core standard library has proved over time to be a particular burden
for the core developers due to testing instability and Berkeley DB's
release schedule.  However, the package is alive and well,
externally maintained at <a class="reference external" href="https://www.jcea.es/programacion/pybsddb.htm">https://www.jcea.es/programacion/pybsddb.htm</a>.</p></li>
<li><p>いくつかのモジュールは <span class="target" id="index-88"></span><a class="pep reference external" href="https://peps.python.org/pep-0008/"><strong>PEP 8</strong></a> に従っていないか、その他の理由により名前が変更されました:</p>
<table class="docutils align-default">
<thead>
<tr class="row-odd"><th class="head"><p>以前の名前</p></th>
<th class="head"><p>新しい名前</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>_winreg</p></td>
<td><p>winreg</p></td>
</tr>
<tr class="row-odd"><td><p>ConfigParser</p></td>
<td><p>configparser</p></td>
</tr>
<tr class="row-even"><td><p>copy_reg</p></td>
<td><p>copyreg</p></td>
</tr>
<tr class="row-odd"><td><p>Queue</p></td>
<td><p>queue</p></td>
</tr>
<tr class="row-even"><td><p>SocketServer</p></td>
<td><p>socketserver</p></td>
</tr>
<tr class="row-odd"><td><p>markupbase</p></td>
<td><p>_markupbase</p></td>
</tr>
<tr class="row-even"><td><p>repr</p></td>
<td><p>reprlib</p></td>
</tr>
<tr class="row-odd"><td><p>test.test_support</p></td>
<td><p>test.support</p></td>
</tr>
</tbody>
</table>
</li>
<li><p>A common pattern in Python 2.x is to have one version of a module
implemented in pure Python, with an optional accelerated version
implemented as a C extension; for example, <a class="reference internal" href="../library/pickle.html#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> and
<code class="xref py py-mod docutils literal notranslate"><span class="pre">cPickle</span></code>.  This places the burden of importing the accelerated
version and falling back on the pure Python version on each user of
these modules.  In Python 3.0, the accelerated versions are
considered implementation details of the pure Python versions.
Users should always import the standard version, which attempts to
import the accelerated version and falls back to the pure Python
version.  The <a class="reference internal" href="../library/pickle.html#module-pickle" title="pickle: Convert Python objects to streams of bytes and back."><code class="xref py py-mod docutils literal notranslate"><span class="pre">pickle</span></code></a> / <code class="xref py py-mod docutils literal notranslate"><span class="pre">cPickle</span></code> pair received this
treatment.  The <a class="reference internal" href="../library/profile.html#module-profile" title="profile: Python source profiler."><code class="xref py py-mod docutils literal notranslate"><span class="pre">profile</span></code></a> module is on the list for 3.1.  The
<code class="xref py py-mod docutils literal notranslate"><span class="pre">StringIO</span></code> module has been turned into a class in the <a class="reference internal" href="../library/io.html#module-io" title="io: Core tools for working with streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">io</span></code></a>
module.</p></li>
<li><p>関連のあるモジュールのいくつかはパッケージにまとめられ、ふつうサブモジュール名は単純化されました。結果として以下のようなパッケージが出来ました:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../library/dbm.html#module-dbm" title="dbm: Interfaces to various Unix &quot;database&quot; formats."><code class="xref py py-mod docutils literal notranslate"><span class="pre">dbm</span></code></a> (<code class="xref py py-mod docutils literal notranslate"><span class="pre">anydbm</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">dbhash</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">dbm</span></code>,
<code class="xref py py-mod docutils literal notranslate"><span class="pre">dumbdbm</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">gdbm</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">whichdb</span></code>).</p></li>
<li><p><a class="reference internal" href="../library/html.html#module-html" title="html: Helpers for manipulating HTML."><code class="xref py py-mod docutils literal notranslate"><span class="pre">html</span></code></a> (<code class="xref py py-mod docutils literal notranslate"><span class="pre">HTMLParser</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">htmlentitydefs</span></code>).</p></li>
<li><p><a class="reference internal" href="../library/http.html#module-http" title="http: HTTP status codes and messages"><code class="xref py py-mod docutils literal notranslate"><span class="pre">http</span></code></a> (<code class="xref py py-mod docutils literal notranslate"><span class="pre">httplib</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">BaseHTTPServer</span></code>,
<code class="xref py py-mod docutils literal notranslate"><span class="pre">CGIHTTPServer</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">SimpleHTTPServer</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">Cookie</span></code>,
<code class="xref py py-mod docutils literal notranslate"><span class="pre">cookielib</span></code>).</p></li>
<li><p><a class="reference internal" href="../library/tkinter.html#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code></a> (<a class="reference internal" href="../library/turtle.html#module-turtle" title="turtle: An educational framework for simple graphics applications"><code class="xref py py-mod docutils literal notranslate"><span class="pre">turtle</span></code></a> を除く全ての <code class="xref py py-mod docutils literal notranslate"><span class="pre">Tkinter</span></code> 関連のモジュール)。
<a class="reference internal" href="../library/turtle.html#module-turtle" title="turtle: An educational framework for simple graphics applications"><code class="xref py py-mod docutils literal notranslate"><span class="pre">turtle</span></code></a> の対象読者は <a class="reference internal" href="../library/tkinter.html#module-tkinter" title="tkinter: Interface to Tcl/Tk for graphical user interfaces"><code class="xref py py-mod docutils literal notranslate"><span class="pre">tkinter</span></code></a> にそれほど関心がありません。
また、Python 2.6 以降では <a class="reference internal" href="../library/turtle.html#module-turtle" title="turtle: An educational framework for simple graphics applications"><code class="xref py py-mod docutils literal notranslate"><span class="pre">turtle</span></code></a> の機能は大幅に向上しました。</p></li>
<li><p><a class="reference internal" href="../library/urllib.html#module-urllib" title="urllib"><code class="xref py py-mod docutils literal notranslate"><span class="pre">urllib</span></code></a> (<code class="xref py py-mod docutils literal notranslate"><span class="pre">urllib</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">urllib2</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">urlparse</span></code>,
<code class="xref py py-mod docutils literal notranslate"><span class="pre">robotparse</span></code>).</p></li>
<li><p><code class="xref py py-mod docutils literal notranslate"><span class="pre">xmlrpc</span></code> (<code class="xref py py-mod docutils literal notranslate"><span class="pre">xmlrpclib</span></code>, <code class="xref py py-mod docutils literal notranslate"><span class="pre">DocXMLRPCServer</span></code>,
<code class="xref py py-mod docutils literal notranslate"><span class="pre">SimpleXMLRPCServer</span></code>).</p></li>
</ul>
</li>
</ul>
<p><span class="target" id="index-89"></span><a class="pep reference external" href="https://peps.python.org/pep-3108/"><strong>PEP 3108</strong></a> で取り上げられていない標準ライブラリーの他の変更:</p>
<ul class="simple">
<li><p>Killed <code class="xref py py-mod docutils literal notranslate"><span class="pre">sets</span></code>.  Use the built-in <a class="reference internal" href="../library/stdtypes.html#set" title="set"><code class="xref py py-func docutils literal notranslate"><span class="pre">set()</span></code></a> class.</p></li>
<li><p><a class="reference internal" href="../library/sys.html#module-sys" title="sys: Access system-specific parameters and functions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">sys</span></code></a> モジュールの整理: <code class="xref py py-func docutils literal notranslate"><span class="pre">sys.exitfunc()</span></code>, <code class="xref py py-func docutils literal notranslate"><span class="pre">sys.exc_clear()</span></code>, <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.exc_type</span></code>, <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.exc_value</span></code>, <code class="xref py py-data docutils literal notranslate"><span class="pre">sys.exc_traceback</span></code> は削除されました。(<a class="reference internal" href="../library/sys.html#sys.last_type" title="sys.last_type"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.last_type</span></code></a> 等はまだあります。)</p></li>
<li><p><a class="reference internal" href="../library/array.html#array.array" title="array.array"><code class="xref py py-class docutils literal notranslate"><span class="pre">array.array</span></code></a> 型の整理: <code class="xref py py-meth docutils literal notranslate"><span class="pre">read()</span></code> ならびに <code class="xref py py-meth docutils literal notranslate"><span class="pre">write()</span></code> メソッドは廃止されました。代わりに <code class="xref py py-meth docutils literal notranslate"><span class="pre">fromfile()</span></code> ならびに <code class="xref py py-meth docutils literal notranslate"><span class="pre">tofile()</span></code> を使用してください。また、array 向けの <code class="docutils literal notranslate"><span class="pre">'c'</span></code> タイプコードは廃止されました。バイトには <code class="docutils literal notranslate"><span class="pre">'b'</span></code> 、Unicode 文字には <code class="docutils literal notranslate"><span class="pre">'u'</span></code> を使用してください。</p></li>
<li><p><a class="reference internal" href="../library/operator.html#module-operator" title="operator: Functions corresponding to the standard operators."><code class="xref py py-mod docutils literal notranslate"><span class="pre">operator</span></code></a> モジュールの整理: <code class="xref py py-func docutils literal notranslate"><span class="pre">sequenceIncludes()</span></code> および <code class="xref py py-func docutils literal notranslate"><span class="pre">isCallable()</span></code> は削除されました。</p></li>
<li><p>Cleanup of the <code class="xref py py-mod docutils literal notranslate"><span class="pre">thread</span></code> module: <code class="xref py py-func docutils literal notranslate"><span class="pre">acquire_lock()</span></code> and
<code class="xref py py-func docutils literal notranslate"><span class="pre">release_lock()</span></code> are gone; use <a class="reference internal" href="../library/threading.html#threading.Lock.acquire" title="threading.Lock.acquire"><code class="xref py py-meth docutils literal notranslate"><span class="pre">acquire()</span></code></a> and
<a class="reference internal" href="../library/threading.html#threading.Lock.release" title="threading.Lock.release"><code class="xref py py-meth docutils literal notranslate"><span class="pre">release()</span></code></a> instead.</p></li>
<li><p><a class="reference internal" href="../library/random.html#module-random" title="random: Generate pseudo-random numbers with various common distributions."><code class="xref py py-mod docutils literal notranslate"><span class="pre">random</span></code></a> モジュールの整理: <code class="xref py py-func docutils literal notranslate"><span class="pre">jumpahead()</span></code> API は削除されました。</p></li>
<li><p>The <code class="xref py py-mod docutils literal notranslate"><span class="pre">new</span></code> module is gone.</p></li>
<li><p>関数 <code class="xref py py-func docutils literal notranslate"><span class="pre">os.tmpnam()</span></code>、<code class="xref py py-func docutils literal notranslate"><span class="pre">os.tempnam()</span></code> および <code class="xref py py-func docutils literal notranslate"><span class="pre">os.tmpfile()</span></code> は <a class="reference internal" href="../library/tempfile.html#module-tempfile" title="tempfile: Generate temporary files and directories."><code class="xref py py-mod docutils literal notranslate"><span class="pre">tempfile</span></code></a> のため削除されました。</p></li>
<li><p><a class="reference internal" href="../library/tokenize.html#module-tokenize" title="tokenize: Lexical scanner for Python source code."><code class="xref py py-mod docutils literal notranslate"><span class="pre">tokenize</span></code></a> モジュールはバイトでも機能するように変更されました。メインのエントリポイントは generate_tokens から <a class="reference internal" href="../library/tokenize.html#tokenize.tokenize" title="tokenize.tokenize"><code class="xref py py-func docutils literal notranslate"><span class="pre">tokenize.tokenize()</span></code></a> になりました。</p></li>
<li><p><code class="xref py py-data docutils literal notranslate"><span class="pre">string.letters</span></code> and its friends (<code class="xref py py-data docutils literal notranslate"><span class="pre">string.lowercase</span></code> and
<code class="xref py py-data docutils literal notranslate"><span class="pre">string.uppercase</span></code>) are gone.  Use
<a class="reference internal" href="../library/string.html#string.ascii_letters" title="string.ascii_letters"><code class="xref py py-data docutils literal notranslate"><span class="pre">string.ascii_letters</span></code></a> etc. instead.  (The reason for the
removal is that <code class="xref py py-data docutils literal notranslate"><span class="pre">string.letters</span></code> and friends had
locale-specific behavior, which is a bad idea for such
attractively named global &quot;constants&quot;.)</p></li>
<li><p>モジュール <code class="xref py py-mod docutils literal notranslate"><span class="pre">__builtin__</span></code> が <a class="reference internal" href="../library/builtins.html#module-builtins" title="builtins: The module that provides the built-in namespace."><code class="xref py py-mod docutils literal notranslate"><span class="pre">builtins</span></code></a> にリネームされました (アンダースコアの削除と 's' の追加)。
大半の大域名前空間における <code class="xref py py-data docutils literal notranslate"><span class="pre">__builtins__</span></code> 変数は変更されていません。
組み込みを変更するには <code class="xref py py-data docutils literal notranslate"><span class="pre">__builtins__</span></code> でなく <a class="reference internal" href="../library/builtins.html#module-builtins" title="builtins: The module that provides the built-in namespace."><code class="xref py py-mod docutils literal notranslate"><span class="pre">builtins</span></code></a> を使わなければなりません。</p></li>
</ul>
</section>
<section id="pep-3101-a-new-approach-to-string-formatting">
<h2><span class="target" id="index-58"></span><a class="pep reference external" href="https://peps.python.org/pep-3101/"><strong>PEP 3101</strong></a>: 文字列整形の新たなアプローチ<a class="headerlink" href="#pep-3101-a-new-approach-to-string-formatting" title="Link to this heading">¶</a></h2>
<ul class="simple">
<li><p>組み込みの新しい文字列書式化操作で、文字列の <code class="docutils literal notranslate"><span class="pre">%</span></code> 演算子を置き換えるものです。(しかしながら <code class="docutils literal notranslate"><span class="pre">%</span></code> 演算子はまだサポートされます; Python 3.1 で非推奨となり、将来のいつかの時点で削除されます。) 完全な詳細は <span class="target" id="index-90"></span><a class="pep reference external" href="https://peps.python.org/pep-3101/"><strong>PEP 3101</strong></a> をお読み下さい。 (--- 訳注: <a class="reference internal" href="#changes-already-present-in-python-2-6">Python 2.6 で既にあった変更</a> での対応する記述に書いた訳注を参照。---)</p></li>
</ul>
</section>
<section id="changes-to-exceptions">
<h2>例外に関する変更<a class="headerlink" href="#changes-to-exceptions" title="Link to this heading">¶</a></h2>
<p>例外の送出や捕捉を行う API は整理され、 強力な新機能が追加されました:</p>
<ul>
<li><p><span class="target" id="index-91"></span><a class="pep reference external" href="https://peps.python.org/pep-0352/"><strong>PEP 352</strong></a>: 全ての例外は (直接的にまたは間接的に) <a class="reference internal" href="../library/exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a> を継承しなければなりません。
<a class="reference internal" href="../library/exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a> は例外階層の根です。
これは勧告としては新しくありませんが、<a class="reference internal" href="../library/exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a> 継承の <em>要求</em> は新しいです。
(Python 2.6 は依然として昔のクラスを送出するのを許容しており、捕捉するものについての制限はありません。)
結果として文字列例外は終に本当の意味で、完全になくなりました。</p></li>
<li><p>ほとんど全ての例外は、実際は <a class="reference internal" href="../library/exceptions.html#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> を継承すべきです。 <a class="reference internal" href="../library/exceptions.html#BaseException" title="BaseException"><code class="xref py py-exc docutils literal notranslate"><span class="pre">BaseException</span></code></a> は最上位で扱われるべき例外、例えば <a class="reference internal" href="../library/exceptions.html#SystemExit" title="SystemExit"><code class="xref py py-exc docutils literal notranslate"><span class="pre">SystemExit</span></code></a> や <a class="reference internal" href="../library/exceptions.html#KeyboardInterrupt" title="KeyboardInterrupt"><code class="xref py py-exc docutils literal notranslate"><span class="pre">KeyboardInterrupt</span></code></a> の基底クラスとしてのみ使われるべきでしす。上記カテゴリーを除く全ての例外を処理するのに推奨されるイディオムは <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> <a class="reference internal" href="../library/exceptions.html#Exception" title="Exception"><code class="xref py py-exc docutils literal notranslate"><span class="pre">Exception</span></code></a> です。</p></li>
<li><p><code class="xref py py-exc docutils literal notranslate"><span class="pre">StandardError</span></code> は削除されました。</p></li>
<li><p>例外はシーケンスとして振る舞わなくなりました。代わりに <code class="xref py py-attr docutils literal notranslate"><span class="pre">args</span></code> 属性を使用してください。</p></li>
<li><p><span class="target" id="index-26"></span><a class="pep reference external" href="https://peps.python.org/pep-3109/"><strong>PEP 3109</strong></a>: Raising exceptions.  You must now use <code class="samp docutils literal notranslate"><span class="pre">raise</span>
<em><span class="pre">Exception</span></em><span class="pre">(</span><em><span class="pre">args</span></em><span class="pre">)</span></code> instead of <code class="samp docutils literal notranslate"><span class="pre">raise</span> <em><span class="pre">Exception</span></em><span class="pre">,</span> <em><span class="pre">args</span></em></code>.
Additionally, you can no longer explicitly specify a traceback;
instead, if you <em>have</em> to do this, you can assign directly to the
<a class="reference internal" href="../library/exceptions.html#BaseException.__traceback__" title="BaseException.__traceback__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__traceback__</span></code></a> attribute (see below).</p></li>
<li><p><span class="target" id="index-92"></span><a class="pep reference external" href="https://peps.python.org/pep-3110/"><strong>PEP 3110</strong></a>: 例外の捕捉。
<code class="samp docutils literal notranslate"><span class="pre">except</span> <em><span class="pre">SomeException</span></em><span class="pre">,</span> <em><span class="pre">variable</span></em></code> ではなく <code class="samp docutils literal notranslate"><span class="pre">except</span> <em><span class="pre">SomeException</span></em> <span class="pre">as</span> <em><span class="pre">variable</span></em></code> としなければなりません。
その上 <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> ブロックがある場合 <em>variable</em> は明示的に削除されます。</p></li>
<li><p><span class="target" id="index-28"></span><a class="pep reference external" href="https://peps.python.org/pep-3134/"><strong>PEP 3134</strong></a>: Exception chaining.  There are two cases: implicit
chaining and explicit chaining.  Implicit chaining happens when an
exception is raised in an <a class="reference internal" href="../reference/compound_stmts.html#except"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">except</span></code></a> or <a class="reference internal" href="../reference/compound_stmts.html#finally"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">finally</span></code></a>
handler block.  This usually happens due to a bug in the handler
block; we call this a <em>secondary</em> exception.  In this case, the
original exception (that was being handled) is saved as the
<a class="reference internal" href="../library/exceptions.html#BaseException.__context__" title="BaseException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> attribute of the secondary exception.
Explicit chaining is invoked with this syntax:</p>
<div class="highlight-python3 notranslate"><div class="highlight"><pre><span></span><span class="k">raise</span> <span class="n">SecondaryException</span><span class="p">()</span> <span class="kn">from</span> <span class="nn">primary_exception</span>
</pre></div>
</div>
<p>(where <em>primary_exception</em> is any expression that produces an
exception object, probably an exception that was previously caught).
In this case, the primary exception is stored on the
<a class="reference internal" href="../library/exceptions.html#BaseException.__cause__" title="BaseException.__cause__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code></a> attribute of the secondary exception.  The
traceback printed when an unhandled exception occurs walks the chain
of <code class="xref py py-attr docutils literal notranslate"><span class="pre">__cause__</span></code> and <a class="reference internal" href="../library/exceptions.html#BaseException.__context__" title="BaseException.__context__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__context__</span></code></a> attributes and
prints a
separate traceback for each component of the chain, with the primary
exception at the top.  (Java users may recognize this behavior.)</p>
</li>
<li><p><span class="target" id="index-29"></span><a class="pep reference external" href="https://peps.python.org/pep-3134/"><strong>PEP 3134</strong></a>: Exception objects now store their traceback as the
<a class="reference internal" href="../library/exceptions.html#BaseException.__traceback__" title="BaseException.__traceback__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__traceback__</span></code></a> attribute.  This means that an exception
object now contains all the information pertaining to an exception,
and there are fewer reasons to use <a class="reference internal" href="../library/sys.html#sys.exc_info" title="sys.exc_info"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.exc_info()</span></code></a> (though the
latter is not removed).</p></li>
<li><p>Windows が拡張モジュールのロードに失敗したときの例外メッセージが少し改善しました。
例えば、<code class="docutils literal notranslate"><span class="pre">error</span> <span class="pre">code</span> <span class="pre">193</span></code> は <code class="docutils literal notranslate"><span class="pre">%1</span> <span class="pre">is</span> <span class="pre">not</span> <span class="pre">a</span> <span class="pre">valid</span> <span class="pre">Win32</span> <span class="pre">application</span></code> になりました。
文字列は英語でないロケールを扱えるようになりました。</p></li>
</ul>
</section>
<section id="miscellaneous-other-changes">
<h2>その他の変更<a class="headerlink" href="#miscellaneous-other-changes" title="Link to this heading">¶</a></h2>
<section id="operators-and-special-methods">
<h3>演算子と特殊メソッド<a class="headerlink" href="#operators-and-special-methods" title="Link to this heading">¶</a></h3>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">!=</span></code> は <code class="docutils literal notranslate"><span class="pre">==</span></code> と逆の結果をかえします（<code class="docutils literal notranslate"><span class="pre">==</span></code> が <a class="reference internal" href="../library/constants.html#NotImplemented" title="NotImplemented"><code class="xref py py-data docutils literal notranslate"><span class="pre">NotImplemented</span></code></a> を返さなければ）。</p></li>
<li><p>「非束縛メソッド (unbound methods)」という概念は言語から削除されました。クラス属性としてのメソッドを参照しても今では普通の関数オブジェクトが得られます。</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">__getslice__()</span></code>, <code class="xref py py-meth docutils literal notranslate"><span class="pre">__setslice__()</span></code>, <code class="xref py py-meth docutils literal notranslate"><span class="pre">__delslice__()</span></code> はお亡くなりになりました。構文 <code class="docutils literal notranslate"><span class="pre">a[i:j]</span></code> は今では <code class="docutils literal notranslate"><span class="pre">a.__getitem__(slice(i,</span> <span class="pre">j))</span></code> と解釈されます (または代入や削除で使われる場合は順に <code class="xref py py-meth docutils literal notranslate"><span class="pre">__setitem__()</span></code> か <code class="xref py py-meth docutils literal notranslate"><span class="pre">__delitem__()</span></code>)。</p></li>
<li><p><span class="target" id="index-93"></span><a class="pep reference external" href="https://peps.python.org/pep-3114/"><strong>PEP 3114</strong></a>:  <a class="reference internal" href="../library/functions.html#next" title="next"><code class="xref py py-meth docutils literal notranslate"><span class="pre">next()</span></code></a> 標準メソッドは <a class="reference internal" href="../library/stdtypes.html#iterator.__next__" title="iterator.__next__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__next__()</span></code></a> に改名されました。</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">__oct__()</span></code> ならびに <code class="xref py py-meth docutils literal notranslate"><span class="pre">__hex__()</span></code> 特殊メソッドは削除されました。
<a class="reference internal" href="../library/functions.html#oct" title="oct"><code class="xref py py-func docutils literal notranslate"><span class="pre">oct()</span></code></a> ならびに <a class="reference internal" href="../library/functions.html#hex" title="hex"><code class="xref py py-func docutils literal notranslate"><span class="pre">hex()</span></code></a> は <code class="xref py py-meth docutils literal notranslate"><span class="pre">__index__()</span></code> を使って引数を整数に変換します。</p></li>
<li><p><code class="xref py py-attr docutils literal notranslate"><span class="pre">__members__</span></code> と <code class="xref py py-attr docutils literal notranslate"><span class="pre">__methods__</span></code> は削除されました。</p></li>
<li><p>The function attributes named <code class="xref py py-attr docutils literal notranslate"><span class="pre">func_X</span></code> have been renamed to
use the <code class="xref py py-attr docutils literal notranslate"><span class="pre">__X__</span></code> form, freeing up these names in the function
attribute namespace for user-defined attributes.  To wit,
<code class="xref py py-attr docutils literal notranslate"><span class="pre">func_closure</span></code>, <code class="xref py py-attr docutils literal notranslate"><span class="pre">func_code</span></code>, <code class="xref py py-attr docutils literal notranslate"><span class="pre">func_defaults</span></code>,
<code class="xref py py-attr docutils literal notranslate"><span class="pre">func_dict</span></code>, <code class="xref py py-attr docutils literal notranslate"><span class="pre">func_doc</span></code>, <code class="xref py py-attr docutils literal notranslate"><span class="pre">func_globals</span></code>,
<code class="xref py py-attr docutils literal notranslate"><span class="pre">func_name</span></code> were renamed to <a class="reference internal" href="../reference/datamodel.html#function.__closure__" title="function.__closure__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__closure__</span></code></a>,
<a class="reference internal" href="../reference/datamodel.html#function.__code__" title="function.__code__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__code__</span></code></a>, <a class="reference internal" href="../reference/datamodel.html#function.__defaults__" title="function.__defaults__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__defaults__</span></code></a>,
<a class="reference internal" href="../reference/datamodel.html#function.__dict__" title="function.__dict__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__dict__</span></code></a>, <a class="reference internal" href="../reference/datamodel.html#function.__doc__" title="function.__doc__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__doc__</span></code></a>,
<a class="reference internal" href="../reference/datamodel.html#function.__globals__" title="function.__globals__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__globals__</span></code></a>, <a class="reference internal" href="../reference/datamodel.html#function.__name__" title="function.__name__"><code class="xref py py-attr docutils literal notranslate"><span class="pre">__name__</span></code></a>,
respectively.</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">__nonzero__()</span></code> is now <a class="reference internal" href="../reference/datamodel.html#object.__bool__" title="object.__bool__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__bool__()</span></code></a>.</p></li>
</ul>
</section>
<section id="builtins">
<h3>組み込み<a class="headerlink" href="#builtins" title="Link to this heading">¶</a></h3>
<ul class="simple">
<li><p><span class="target" id="index-94"></span><a class="pep reference external" href="https://peps.python.org/pep-3135/"><strong>PEP 3135</strong></a>: 新しくなった <a class="reference internal" href="../library/functions.html#super" title="super"><code class="xref py py-func docutils literal notranslate"><span class="pre">super()</span></code></a> 。今では <a class="reference internal" href="../library/functions.html#super" title="super"><code class="xref py py-func docutils literal notranslate"><span class="pre">super()</span></code></a> は引数なしで呼び出せます。(これが <a class="reference internal" href="../reference/compound_stmts.html#class"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">class</span></code></a> 内で定義される通常のインスタンスメソッド内であると仮定して) 正しいクラスとインスタンスが自動的に選択されます。引数ありの場合の <a class="reference internal" href="../library/functions.html#super" title="super"><code class="xref py py-func docutils literal notranslate"><span class="pre">super()</span></code></a> の振る舞いには変更はありません。</p></li>
<li><p><span class="target" id="index-95"></span><a class="pep reference external" href="https://peps.python.org/pep-3111/"><strong>PEP 3111</strong></a>: <code class="xref py py-func docutils literal notranslate"><span class="pre">raw_input()</span></code> が <a class="reference internal" href="../library/functions.html#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a> にリネームされました。つまり、新しい <a class="reference internal" href="../library/functions.html#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a> 関数は <a class="reference internal" href="../library/sys.html#sys.stdin" title="sys.stdin"><code class="xref py py-data docutils literal notranslate"><span class="pre">sys.stdin</span></code></a> から行を読み、末尾の改行を取り除いて返します。入力が時期尚早に終わってしまったら <a class="reference internal" href="../library/exceptions.html#EOFError" title="EOFError"><code class="xref py py-exc docutils literal notranslate"><span class="pre">EOFError</span></code></a> になります。昔の <a class="reference internal" href="../library/functions.html#input" title="input"><code class="xref py py-func docutils literal notranslate"><span class="pre">input()</span></code></a> の振る舞いが欲しければ <code class="docutils literal notranslate"><span class="pre">eval(input())</span></code> としてください。</p></li>
<li><p>新しい組み込み関数 <a class="reference internal" href="../library/functions.html#next" title="next"><code class="xref py py-func docutils literal notranslate"><span class="pre">next()</span></code></a> が追加されました。 オブジェクトの <a class="reference internal" href="../library/stdtypes.html#iterator.__next__" title="iterator.__next__"><code class="xref py py-meth docutils literal notranslate"><span class="pre">__next__()</span></code></a> メソッドを呼び出します。</p></li>
<li><p><a class="reference internal" href="../library/functions.html#round" title="round"><code class="xref py py-func docutils literal notranslate"><span class="pre">round()</span></code></a> 関数の丸めの戦略と戻り値の型が変更されました。ど真ん中の場合に、四捨五入ではなく最近接偶数への丸めをするようになりました。(例えば <code class="docutils literal notranslate"><span class="pre">round(2.5)</span></code> は今では <code class="docutils literal notranslate"><span class="pre">2</span></code> を返します。 <code class="docutils literal notranslate"><span class="pre">3</span></code> ではなく。) (---訳注: 丸めモードについては <a class="reference external" href="https://en.wikipedia.org/wiki/Rounding#Tie-breaking">Wikipedia</a> 参照。---) <code class="docutils literal notranslate"><span class="pre">round(x[,</span> <span class="pre">n])</span></code> は常に浮動小数点数の結果を返す代わりに、 <code class="docutils literal notranslate"><span class="pre">x.__round__([n])</span></code> に処理を委譲するようになりました。これは一般的に、単一引数で呼ばれた際に整数を返し、二つの引数で呼ばれた場合は <code class="docutils literal notranslate"><span class="pre">x</span></code> と同じ型の値として返します。</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">intern()</span></code> は <a class="reference internal" href="../library/sys.html#sys.intern" title="sys.intern"><code class="xref py py-func docutils literal notranslate"><span class="pre">sys.intern()</span></code></a> に移動しました。</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">apply()</span></code> は削除されました。 <code class="docutils literal notranslate"><span class="pre">apply(f,</span> <span class="pre">args)</span></code> の代わりに <code class="docutils literal notranslate"><span class="pre">f(*args)</span></code> を使用してください。</p></li>
<li><p><a class="reference internal" href="../library/functions.html#callable" title="callable"><code class="xref py py-func docutils literal notranslate"><span class="pre">callable()</span></code></a> は削除されました。 <code class="docutils literal notranslate"><span class="pre">callable(f)</span></code> のかわりに <code class="docutils literal notranslate"><span class="pre">isinstance(f,</span> <span class="pre">collections.Callable)</span></code> を使用してください。 <code class="xref py py-func docutils literal notranslate"><span class="pre">operator.isCallable()</span></code> も削除されました。</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">coerce()</span></code> は削除されました。古い形式のクラスが削除されたため、この関数は必要ありません。</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">execfile()</span></code> は削除されました。 <code class="docutils literal notranslate"><span class="pre">execfile(fn)</span></code> の代わりに <code class="docutils literal notranslate"><span class="pre">exec(open(fn).read())</span></code> を使用してください。</p></li>
<li><p>Removed the <code class="xref py py-class docutils literal notranslate"><span class="pre">file</span></code> type.  Use <a class="reference internal" href="../library/functions.html#open" title="open"><code class="xref py py-func docutils literal notranslate"><span class="pre">open()</span></code></a>.  There are now several
different kinds of streams that open can return in the <a class="reference internal" href="../library/io.html#module-io" title="io: Core tools for working with streams."><code class="xref py py-mod docutils literal notranslate"><span class="pre">io</span></code></a> module.</p></li>
<li><p><code class="xref py py-func docutils literal notranslate"><span class="pre">reduce()</span></code> は削除されました。もし本当に必要なら <a class="reference internal" href="../library/functools.html#functools.reduce" title="functools.reduce"><code class="xref py py-func docutils literal notranslate"><span class="pre">functools.reduce()</span></code></a> を使用してください。ほぼ間違いなく <a class="reference internal" href="../reference/compound_stmts.html#for"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">for</span></code></a> ループのほうがより可読性が高いでしょう。</p></li>
<li><p>Removed <code class="xref py py-func docutils literal notranslate"><span class="pre">reload()</span></code>.  Use <code class="xref py py-func docutils literal notranslate"><span class="pre">imp.reload()</span></code>.</p></li>
<li><p><code class="xref py py-meth docutils literal notranslate"><span class="pre">dict.has_key()</span></code> は削除されました -- 代わりに <a class="reference internal" href="../reference/expressions.html#in"><code class="xref std std-keyword docutils literal notranslate"><span class="pre">in</span></code></a> 演算子を使用してください。</p></li>
</ul>
</section>
</section>
<section id="build-and-c-api-changes">
<h2>ビルドならびに C API の変更<a class="headerlink" href="#build-and-c-api-changes" title="Link to this heading">¶</a></h2>
<p>時間がないため、以下のC APIへの変更点のリストは <em>かなり</em> 不完全です。</p>
<ul class="simple">
<li><p>Mac OS 9, BeOS, RISCOS, Irix, Tru64 に限らず、いくつものプラットフォームのサポートが打ち切られました。</p></li>
<li><p><span class="target" id="index-96"></span><a class="pep reference external" href="https://peps.python.org/pep-3118/"><strong>PEP 3118</strong></a>: 新たなバッファ API。</p></li>
<li><p><span class="target" id="index-97"></span><a class="pep reference external" href="https://peps.python.org/pep-3121/"><strong>PEP 3121</strong></a>: 例外モジュールの初期化と最終化</p></li>
<li><p><span class="target" id="index-98"></span><a class="pep reference external" href="https://peps.python.org/pep-3123/"><strong>PEP 3123</strong></a>: <a class="reference internal" href="../c-api/structures.html#c.PyObject_HEAD" title="PyObject_HEAD"><code class="xref c c-macro docutils literal notranslate"><span class="pre">PyObject_HEAD</span></code></a> を標準的な C に一致。</p></li>
<li><p>制限付き実行 の C API サポートはこれ以上されません。</p></li>
<li><p><code class="xref c c-func docutils literal notranslate"><span class="pre">PyNumber_Coerce()</span></code>, <code class="xref c c-func docutils literal notranslate"><span class="pre">PyNumber_CoerceEx()</span></code>,
<code class="xref c c-func docutils literal notranslate"><span class="pre">PyMember_Get()</span></code>, and <code class="xref c c-func docutils literal notranslate"><span class="pre">PyMember_Set()</span></code> C APIs are removed.</p></li>
<li><p>新たな C API <a class="reference internal" href="../c-api/import.html#c.PyImport_ImportModuleNoBlock" title="PyImport_ImportModuleNoBlock"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_ImportModuleNoBlock()</span></code></a>、<a class="reference internal" href="../c-api/import.html#c.PyImport_ImportModule" title="PyImport_ImportModule"><code class="xref c c-func docutils literal notranslate"><span class="pre">PyImport_ImportModule()</span></code></a> のように動きますが、インポートロックでブロックしません (代わりにエラーを返します)。</p></li>
<li><p>ブール変換の C 水準のスロットとメソッドがリネームされました: <code class="docutils literal notranslate"><span class="pre">nb_nonzero</span></code> が <code class="docutils literal notranslate"><span class="pre">nb_bool</span></code> になりました。</p></li>
<li><p>Removed <code class="xref c c-macro docutils literal notranslate"><span class="pre">METH_OLDARGS</span></code> and <code class="xref c c-macro docutils literal notranslate"><span class="pre">WITH_CYCLE_GC</span></code> from the C API.</p></li>
</ul>
</section>
<section id="performance">
<h2>性能<a class="headerlink" href="#performance" title="Link to this heading">¶</a></h2>
<p>3.0 の可搬化 (generalization) による正味の結果は、Python 3.0 を pystone ベンチマークすると Python 2.5 より 10% 遅くなる、というものでした。これはどうやら小さい整数についての特殊処理を削除したことに一番大きな要因があるようです。これには改善の余地がありますが、それは 3.0 リリース以降でしょう!</p>
</section>
<section id="porting-to-python-3-0">
<h2>Python 3.0 への移植<a class="headerlink" href="#porting-to-python-3-0" title="Link to this heading">¶</a></h2>
<p>(---訳注: 今では独立したクックブック <a class="reference internal" href="../howto/pyporting.html#pyporting-howto"><span class="std std-ref">How to port Python 2 Code to Python 3</span></a> があるのでそちらをご覧下さい。---) 既存の Python 2.5 や 2.6 のソースコードを Python 3.0 に移植する最良の策は以下の通りです:</p>
<ol class="arabic simple" start="0">
<li><p>(必須:) 優秀なテストカバレッジから始めてください。</p></li>
<li><p>Python 2.6 に移植します。Python 2.x を Python 2.(x+1) に移植する普通の作業以上のことをしてはいけません。確実に全てのテストを通してください。</p></li>
<li><p>(まだ 2.6 を使います:) コマンドラインに <code class="xref std std-option docutils literal notranslate"><span class="pre">-3</span></code> オプションを渡します。これは 3.0 で削除された (または変更された) 機能についての警告発行を有効にします。再びテストスイートを実行して、そして警告が出たコードをそれがなくなるまで修正し、全てのテストをパスさせます。</p></li>
<li><p>Run the <code class="docutils literal notranslate"><span class="pre">2to3</span></code> source-to-source translator over your source code
tree.  (See <a class="reference internal" href="../library/2to3.html#to3-reference"><span class="std std-ref">2to3 --- Python 2 から 3 への自動コード変換</span></a> for more on this tool.)  Run the
result of the translation under Python 3.0.  Manually fix up any
remaining issues, fixing problems until all tests pass again.</p></li>
</ol>
<p>Python 2.6 と 3.0 両方で変更なしに動作するコードを書こうとすることはお奨め出来ません; それをするととても捻じ曲がったコーディングスタイルを使う必要があるでしょう。例えば <code class="docutils literal notranslate"><span class="pre">print</span></code> やメタクラスを避けたりとかそんな。Python 2.6 と 3.0 両バージョンともに対するサポートを必要とするライブラリを保守しているのであれば、最良のアプローチは上記スリーステップを修正して、2.6 版のソースコードを編集して <code class="docutils literal notranslate"><span class="pre">2to3</span></code> する、を繰り返すことです。これは 3.0 版のソースコードを編集するより良いです。(---訳注: ここで言っていることは正論なのですが、 <code class="docutils literal notranslate"><span class="pre">2to3</span></code> は「Python 3 では動くが Python 2 では動かない (かもしれない)」ものを生成します。2016 時点でも Python 2.7 はかなり元気 (予定では 2020 年までは公式にサポートされる) ですので両バージョン (ただし今だと 2.7 と 3.2 以降) で変更なしで動作するものを必要とすることは、残念ながらまだ多いでしょう (あなたが作っているのがライブラリであるならば)。これについては <a class="reference internal" href="../howto/pyporting.html#pyporting-howto"><span class="std std-ref">How to port Python 2 Code to Python 3</span></a> に少し書かれています。 ---)</p>
<p>C 拡張を Python 3.0 に移植するには、 <a class="reference internal" href="../howto/cporting.html#cporting-howto"><span class="std std-ref">Python 3 への拡張モジュール移植</span></a> を参照してください。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <div>
    <h3><a href="../contents.html">目次</a></h3>
    <ul>
<li><a class="reference internal" href="#">What's New In Python 3.0</a><ul>
<li><a class="reference internal" href="#common-stumbling-blocks">よくある悩みの種</a><ul>
<li><a class="reference internal" href="#print-is-a-function">print関数</a></li>
<li><a class="reference internal" href="#views-and-iterators-instead-of-lists">リストからビューおよびイテレータへ</a></li>
<li><a class="reference internal" href="#ordering-comparisons">順序比較</a></li>
<li><a class="reference internal" href="#integers">整数</a></li>
<li><a class="reference internal" href="#text-vs-data-instead-of-unicode-vs-8-bit">Unicode 対 8 ビット、ではなく、テキスト対データに</a></li>
</ul>
</li>
<li><a class="reference internal" href="#overview-of-syntax-changes">構文の変更の概要</a><ul>
<li><a class="reference internal" href="#new-syntax">新たな構文</a></li>
<li><a class="reference internal" href="#changed-syntax">変更された構文</a></li>
<li><a class="reference internal" href="#removed-syntax">削除された操作</a></li>
</ul>
</li>
<li><a class="reference internal" href="#changes-already-present-in-python-2-6">Python 2.6 で既にあった変更</a></li>
<li><a class="reference internal" href="#library-changes">ライブラリの変更</a></li>
<li><a class="reference internal" href="#pep-3101-a-new-approach-to-string-formatting"><strong>PEP 3101</strong>: 文字列整形の新たなアプローチ</a></li>
<li><a class="reference internal" href="#changes-to-exceptions">例外に関する変更</a></li>
<li><a class="reference internal" href="#miscellaneous-other-changes">その他の変更</a><ul>
<li><a class="reference internal" href="#operators-and-special-methods">演算子と特殊メソッド</a></li>
<li><a class="reference internal" href="#builtins">組み込み</a></li>
</ul>
</li>
<li><a class="reference internal" href="#build-and-c-api-changes">ビルドならびに C API の変更</a></li>
<li><a class="reference internal" href="#performance">性能</a></li>
<li><a class="reference internal" href="#porting-to-python-3-0">Python 3.0 への移植</a></li>
</ul>
</li>
</ul>

  </div>
  <div>
    <h4>前のトピックへ</h4>
    <p class="topless"><a href="3.1.html"
                          title="前の章へ">What's New In Python 3.1</a></p>
  </div>
  <div>
    <h4>次のトピックへ</h4>
    <p class="topless"><a href="2.7.html"
                          title="次の章へ">What's New in Python 2.7</a></p>
  </div>
  <div role="note" aria-label="source link">
    <h3>このページ</h3>
    <ul class="this-page-menu">
      <li><a href="../bugs.html">バグ報告</a></li>
      <li>
        <a href="https://github.com/python/cpython/blob/main/Doc/whatsnew/3.0.rst"
            rel="nofollow">ソースの表示
        </a>
      </li>
    </ul>
  </div>
        </div>
<div id="sidebarbutton" title="サイドバーをたたむ">
<span>«</span>
</div>

      </div>
      <div class="clearer"></div>
    </div>  
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>ナビゲーション</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../genindex.html" title="総合索引"
             >索引</a></li>
        <li class="right" >
          <a href="../py-modindex.html" title="Pythonモジュール索引"
             >モジュール</a> |</li>
        <li class="right" >
          <a href="2.7.html" title="What&#39;s New in Python 2.7"
             >次へ</a> |</li>
        <li class="right" >
          <a href="3.1.html" title="What&#39;s New In Python 3.1"
             >前へ</a> |</li>

          <li><img src="../_static/py.svg" alt="Python logo" style="vertical-align: middle; margin-top: -1px"/></li>
          <li><a href="https://www.python.org/">Python</a> &#187;</li>
          <li class="switchers">
            <div class="language_switcher_placeholder"></div>
            <div class="version_switcher_placeholder"></div>
          </li>
          <li>
              
          </li>
    <li id="cpython-language-and-version">
      <a href="../index.html">3.12.4 Documentation</a> &#187;
    </li>

          <li class="nav-item nav-item-1"><a href="index.html" >What's New in Python</a> &#187;</li>
        <li class="nav-item nav-item-this"><a href="">What's New In Python 3.0</a></li>
                <li class="right">
                    

    <div class="inline-search" role="search">
        <form class="inline-search" action="../search.html" method="get">
          <input placeholder="クイック検索" aria-label="クイック検索" type="search" name="q" id="search-box" />
          <input type="submit" value="検索" />
        </form>
    </div>
                     |
                </li>
            <li class="right">
<label class="theme-selector-label">
    Theme
    <select class="theme-selector" oninput="activateTheme(this.value)">
        <option value="auto" selected>Auto</option>
        <option value="light">Light</option>
        <option value="dark">Dark</option>
    </select>
</label> |</li>
            
      </ul>
    </div>  
    <div class="footer">
    &copy; 
      <a href="../copyright.html">
    
    Copyright
    
      </a>
     2001-2024, Python Software Foundation.
    <br />
    This page is licensed under the Python Software Foundation License Version 2.
    <br />
    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.
    <br />
    
      See <a href="/license.html">History and License</a> for more information.<br />
    
    
    <br />

    The Python Software Foundation is a non-profit corporation.
<a href="https://www.python.org/psf/donations/">Please donate.</a>
<br />
    <br />
      最終更新: Jun 11, 2024 (04:44 UTC)
    
      <a href="/bugs.html">Found a bug</a>?
    
    <br />

    Created using <a href="https://www.sphinx-doc.org/">Sphinx</a> 7.3.7.
    </div>

    <script type="text/javascript" src="../_static/switchers.js"></script>
  </body>
</html>